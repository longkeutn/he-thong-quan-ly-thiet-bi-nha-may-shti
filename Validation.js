/**
 * H√†m ch√≠nh ƒë·ªÉ ki·ªÉm tra t√≠nh nh·∫•t qu√°n d·ªØ li·ªáu tr√™n c√°c sheet.
 * T·∫°o sheet b√°o c√°o l·ªói, highlight d√≤ng l·ªói v√† t·∫°o link ƒëi·ªÅu h∆∞·ªõng.
 * ƒê∆∞·ª£c g·ªçi t·ª´ Menu t√πy ch·ªânh "üîç Ki·ªÉm tra T√≠nh nh·∫•t qu√°n D·ªØ li·ªáu".
 */
function checkDataConsistency() {
  const FUNCTION_NAME = "checkDataConsistency";
  Logger.log(`===== B·∫ÆT ƒê·∫¶U ${FUNCTION_NAME} =====`);
  
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const reportSheetName = "B√°o c√°o L·ªói D·ªØ li·ªáu";
  const highlightColor = "#fce8e6"; // M√†u h·ªìng nh·∫°t
  const headers = ["Sheet", "D√≤ng", "√î L·ªói (∆Ø·ªõc l∆∞·ª£ng)", "Link", "M√¥ t·∫£ L·ªói"];
  
  let reportSheet;
  let allIssues = [];
  let rangesToHighlight = {};
  
  try {
    // ---- T·∫°o ho·∫∑c x√≥a n·ªôi dung Sheet B√°o c√°o ----
    Logger.log(`[${FUNCTION_NAME}] Chu·∫©n b·ªã sheet b√°o c√°o "${reportSheetName}"...`);
    reportSheet = ss.getSheetByName(reportSheetName);
    
    if (reportSheet) {
      // Sheet ƒë√£ t·ªìn t·∫°i - x√≥a n·ªôi dung
      reportSheet.clearContents();
      try {
        ss.setActiveSheet(reportSheet, true);
      } catch(e) { 
        Logger.log(`[${FUNCTION_NAME}] Kh√¥ng th·ªÉ activate report sheet (c√≥ th·ªÉ ƒë√£ ·∫©n): ${e}`);
      }
    } else {
      // T·∫°o sheet m·ªõi
      reportSheet = ss.insertSheet(reportSheetName);
      ss.setActiveSheet(reportSheet, true);
    }
    
    // ƒê·∫∑t ti√™u ƒë·ªÅ cho sheet b√°o c√°o
    reportSheet.getRange("A1:E1").setValues([headers]).setFontWeight("bold");
    reportSheet.setFrozenRows(1);
    
    // C·ªë g·∫Øng ƒë·∫∑t ƒë·ªãnh d·∫°ng c·ªôt Link (D) th√†nh Automatic
    try {
      const linkColumn = reportSheet.getRange("D2:D");
      linkColumn.setNumberFormat("@"); // Text
      SpreadsheetApp.flush();
      Utilities.sleep(200);
      linkColumn.setNumberFormat("General"); // Automatic
      Logger.log(`[${FUNCTION_NAME}] ƒê√£ ƒë·∫∑t ƒë·ªãnh d·∫°ng c·ªôt Link c·ªßa Sheet B√°o c√°o th√†nh Automatic.`);
    } catch(formatErr) {
      Logger.log(`[${FUNCTION_NAME}] L·ªói khi ƒë·∫∑t ƒë·ªãnh d·∫°ng c·ªôt Link: ${formatErr}`);
    }
    
    SpreadsheetApp.flush(); // ƒê·∫£m b·∫£o sheet s·∫µn s√†ng
    
    // ---- Ch·∫°y c√°c h√†m ki·ªÉm tra ----
    Logger.log(`[${FUNCTION_NAME}] B·∫Øt ƒë·∫ßu ch·∫°y c√°c ki·ªÉm tra...`);
    
    // Ch·∫°y c√°c ki·ªÉm tra c∆° b·∫£n
    allIssues = allIssues.concat(findMissingTypeLocation_());
    allIssues = allIssues.concat(findOrphanHistoryRecords_());
    
    // Ch·∫°y c√°c ki·ªÉm tra m·ªü r·ªông
    allIssues = allIssues.concat(findInconsistentMaintDates_()); // Ki·ªÉm tra ng√†y b·∫£o tr√¨ TB
    allIssues = allIssues.concat(findInvalidPurchaseLinks_());   // Ki·ªÉm tra M√£ L√¥ Mua H√†ng trong TB
    
    Logger.log(`[${FUNCTION_NAME}] ƒê√£ ho√†n th√†nh t·∫•t c·∫£ ki·ªÉm tra. T·ªïng s·ªë v·∫•n ƒë·ªÅ: ${allIssues.length}`);
    
    // ---- X·ª≠ l√Ω k·∫øt qu·∫£ ----
    if (allIssues.length > 0) {
      // Thu th·∫≠p d·ªØ li·ªáu b√°o c√°o
      Logger.log(`[${FUNCTION_NAME}] ƒêang x·ª≠ l√Ω ${allIssues.length} v·∫•n ƒë·ªÅ ƒë·ªÉ hi·ªÉn th·ªã tr√™n b√°o c√°o...`);
      const reportData = [];
      
      allIssues.forEach(issue => {
        Logger.log(`[${issue.sheetName}] D√≤ng ${issue.row}: ${issue.message}`);
        let rowDataForReport = [issue.sheetName || "L·ªói", issue.row || "?", "", "", issue.message];
        
        if (issue.sheetName !== "H·ªá th·ªëng" && issue.row > 0) {
          const targetSheet = ss.getSheetByName(issue.sheetName);
          if (targetSheet) {
            const sheetId = targetSheet.getSheetId();
            const errorColumnIndex = issue.column || 1;
            const colLetter = columnToLetter_(errorColumnIndex);
            
            // T·∫°o notation v√† URL link s·ª≠ d·ª•ng to√°n t·ª≠ +
            const rangeNotation = colLetter + issue.row;
            const cellLinkUrl = "#gid=" + sheetId + "&range=" + rangeNotation;
            const cellLinkFormula = '=HYPERLINK("' + cellLinkUrl + '";"' + rangeNotation + '")';
            
            // C·∫≠p nh·∫≠t d·ªØ li·ªáu b√°o c√°o
            rowDataForReport = [issue.sheetName, issue.row, rangeNotation, cellLinkFormula, issue.message];
            
            // Chu·∫©n b·ªã danh s√°ch d√≤ng c·∫ßn highlight
            if (!rangesToHighlight[issue.sheetName]) {
              rangesToHighlight[issue.sheetName] = [];
            }
            rangesToHighlight[issue.sheetName].push(issue.row);
          } else {
            rowDataForReport[4] = `L·ªói: Kh√¥ng t√¨m th·∫•y sheet '${issue.sheetName}' ƒë·ªÉ t·∫°o link. L·ªói g·ªëc: ${issue.message}`;
          }
        }
        
        reportData.push(rowDataForReport);
      });
      
      // Ghi d·ªØ li·ªáu v√†o sheet b√°o c√°o
      if (reportData.length > 0) {
        reportSheet.getRange(2, 1, reportData.length, headers.length).setValues(reportData);
        Logger.log(`[${FUNCTION_NAME}] ƒê√£ ghi ${reportData.length} d√≤ng v√†o Sheet B√°o c√°o.`);
      }
      
      // ƒê·∫£m b·∫£o d·ªØ li·ªáu ƒë∆∞·ª£c ghi tr∆∞·ªõc khi highlight
      SpreadsheetApp.flush();
      Utilities.sleep(500);
      
      // Highlight c√°c d√≤ng c√≥ l·ªói
      Logger.log(`[${FUNCTION_NAME}] B·∫Øt ƒë·∫ßu th·ª±c hi·ªán highlight...`);
      for (const sheetName in rangesToHighlight) {
        const targetSheet = ss.getSheetByName(sheetName);
        if (targetSheet) {
          const rowsToHighlight = rangesToHighlight[sheetName];
          const maxCols = targetSheet.getMaxColumns();
          Logger.log(`[${FUNCTION_NAME}] Highlighting sheet: ${sheetName}, Rows: ${rowsToHighlight.join(',')}, MaxCols: ${maxCols}`);
          
          rowsToHighlight.forEach(rowNum => {
            if (rowNum > 1 && maxCols > 0) {
              try {
                // Highlight c·∫£ d√≤ng
                targetSheet.getRange(rowNum, 1, 1, maxCols).setBackground(highlightColor);
                Logger.log(`[${FUNCTION_NAME}] > ƒê√£ highlight d√≤ng ${rowNum} sheet ${sheetName}`);
              } catch (highlightError) {
                Logger.log(`[${FUNCTION_NAME}] > L·ªói khi highlight d√≤ng ${rowNum} sheet ${sheetName}: ${highlightError}`);
              }
            } else {
              Logger.log(`[${FUNCTION_NAME}] > B·ªè qua highlight d√≤ng kh√¥ng h·ª£p l·ªá ${rowNum} ho·∫∑c maxCols=0`);
            }
          });
        }
      }
      Logger.log(`[${FUNCTION_NAME}] ƒê√£ ho√†n th√†nh highlight.`);
      
      // ƒê·ªãnh d·∫°ng l·∫°i sheet b√°o c√°o
      try {
        reportSheet.getDataRange().setVerticalAlignment("top");
        reportSheet.autoResizeColumns(1, headers.length);
        Logger.log(`[${FUNCTION_NAME}] ƒê√£ ƒë·ªãnh d·∫°ng sheet b√°o c√°o.`);
      } catch (resizeError) {
        Logger.log(`[${FUNCTION_NAME}] L·ªói khi t·ª± ƒë·ªông thay ƒë·ªïi k√≠ch th∆∞·ªõc c·ªôt b√°o c√°o: ${resizeError}`);
      }
      
      // Th√¥ng b√°o cho ng∆∞·ªùi d√πng
      ui.alert(`T√¨m th·∫•y ${allIssues.length} v·∫•n ƒë·ªÅ. Xem sheet 'B√°o c√°o L·ªói D·ªØ li·ªáu'.`);
      
    } else {
      // Kh√¥ng t√¨m th·∫•y v·∫•n ƒë·ªÅ n√†o
      Logger.log(`[${FUNCTION_NAME}] Kh√¥ng t√¨m th·∫•y v·∫•n ƒë·ªÅ n√†o.`);
      reportSheet.getRange("A2").setValue("Kh√¥ng t√¨m th·∫•y v·∫•n ƒë·ªÅ n√†o.");
      ui.alert("Ki·ªÉm tra ho√†n t·∫•t: Kh√¥ng c√≥ v·∫•n ƒë·ªÅ.");
    }
    
  } catch (e) {
    // X·ª≠ l√Ω l·ªói chung
    Logger.log(`[${FUNCTION_NAME}] L·ªói nghi√™m tr·ªçng: ${e} \nStack: ${e.stack}`);
    try { 
      if (reportSheet) {
        reportSheet.getRange("A2").setValue(`L·ªói h·ªá th·ªëng: ${e.message}`);
      }
    } catch(err) {
      Logger.log(`[${FUNCTION_NAME}] Kh√¥ng th·ªÉ ghi l·ªói v√†o sheet b√°o c√°o: ${err}`);
    }
    ui.alert("L·ªói nghi√™m tr·ªçng khi ki·ªÉm tra. Xem Log ƒë·ªÉ bi·∫øt chi ti·∫øt.");
  }
  
  Logger.log(`===== K·∫æT TH√öC ${FUNCTION_NAME} =====`);
}


// ==================================
// C√ÅC H√ÄM KI·ªÇM TRA T√çNH NH·∫§T QU√ÅN D·ªÆ LI·ªÜU
// ==================================

/**
 * H√†m ti·ªán √≠ch chuy·ªÉn ƒë·ªïi ch·ªâ s·ªë c·ªôt th√†nh ch·ªØ c√°i (1->A, 2->B, 27->AA).
 * @param {number} column Ch·ªâ s·ªë c·ªôt (b·∫Øt ƒë·∫ßu t·ª´ 1).
 * @return {string} Ch·ªØ c√°i t∆∞∆°ng ·ª©ng cho c·ªôt.
 * @private
 */
function columnToLetter_(column) {
  if (typeof column !== 'number' || column < 1) {
    return '';
  }
  
  let temp, letter = '';
  while (column > 0) {
    temp = (column - 1) % 26;
    letter = String.fromCharCode(temp + 65) + letter;
    column = Math.floor((column - temp - 1) / 26);
  }
  return letter;
}

/**
 * X√≥a m√†u n·ªÅn highlight kh·ªèi c√°c sheet d·ªØ li·ªáu ch√≠nh.
 * H√†m n√†y ƒë∆∞·ª£c g·ªçi t·ª´ Menu t√πy ch·ªânh "üßπ X√≥a ƒê√°nh d·∫•u L·ªói".
 */
function clearErrorHighlights() {
  const FUNCTION_NAME = "clearErrorHighlights";
  const ui = SpreadsheetApp.getUi();
  let totalCleared = 0;
  
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheetsToClear = [EQUIPMENT_SHEET_NAME, HISTORY_SHEET_NAME]; // Th√™m c√°c sheet kh√°c n·∫øu c·∫ßn
    
    sheetsToClear.forEach(sheetName => {
      const sheet = ss.getSheetByName(sheetName);
      if (sheet) {
        try {
          const lastRow = sheet.getLastRow();
          if (lastRow > 1) {
            // Ch·ªâ x√≥a n·∫øu c√≥ d·ªØ li·ªáu ngo√†i header
            const rangeToChange = sheet.getRange(2, 1, lastRow - 1, sheet.getMaxColumns());
            rangeToChange.setBackground(null);
            const rowsCleared = lastRow - 1;
            totalCleared += rowsCleared;
            Logger.log(`[${FUNCTION_NAME}] ƒê√£ x√≥a highlight ${rowsCleared} d√≤ng kh·ªèi sheet: ${sheetName}`);
          } else {
            Logger.log(`[${FUNCTION_NAME}] Sheet ${sheetName} ch·ªâ c√≥ header ho·∫∑c tr·ªëng. B·ªè qua.`);
          }
        } catch (clearError) {
          Logger.log(`[${FUNCTION_NAME}] L·ªói khi x√≥a highlight sheet ${sheetName}: ${clearError}`);
        }
      } else {
        Logger.log(`[${FUNCTION_NAME}] Kh√¥ng t√¨m th·∫•y sheet: ${sheetName}`);
      }
    });
    
    const message = totalCleared > 0 
      ? `ƒê√£ x√≥a c√°c ƒë√°nh d·∫•u l·ªói (${totalCleared} d√≤ng t·ª´ ${sheetsToClear.length} sheet).`
      : "Kh√¥ng c√≥ ƒë√°nh d·∫•u l·ªói n√†o c·∫ßn x√≥a.";
    ui.alert(message);
    
  } catch (e) {
    Logger.log(`[${FUNCTION_NAME}] L·ªói: ${e}\nStack: ${e.stack}`);
    ui.alert(`C√≥ l·ªói x·∫£y ra khi x√≥a highlight: ${e.message}`);
  }
}

/**
 * [CHECK 1] T√¨m c√°c thi·∫øt b·ªã thi·∫øu Lo·∫°i ho·∫∑c V·ªã tr√≠.
 * @return {Array<Object>} M·∫£ng c√°c object l·ªói { sheetName, row, column, message }.
 * @private
 */
function findMissingTypeLocation_() {
  const FUNCTION_NAME = "findMissingTypeLocation_";
  const errors = [];
  const sheetName = EQUIPMENT_SHEET_NAME;
  
  try {
    Logger.log(`[${FUNCTION_NAME}] B·∫Øt ƒë·∫ßu ki·ªÉm tra thi·∫øt b·ªã thi·∫øu Lo·∫°i ho·∫∑c V·ªã tr√≠...`);
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const equipmentSheet = ss.getSheetByName(sheetName);
    
    if (!equipmentSheet) {
      Logger.log(`[${FUNCTION_NAME}] Kh√¥ng t√¨m th·∫•y sheet "${sheetName}"`);
      return [{ 
        sheetName: "H·ªá th·ªëng", 
        row: 0, 
        message: `L·ªói: Kh√¥ng t√¨m th·∫•y Sheet ${sheetName}.` 
      }];
    }

    const lastRow = equipmentSheet.getLastRow();
    if (lastRow <= 1) {
      Logger.log(`[${FUNCTION_NAME}] Sheet "${sheetName}" kh√¥ng c√≥ d·ªØ li·ªáu.`);
      return errors; // Tr·∫£ v·ªÅ m·∫£ng r·ªóng
    }
    
    const lastColRead = Math.max(COL_EQUIP_ID, COL_EQUIP_TYPE, COL_EQUIP_LOCATION);
    const data = equipmentSheet.getRange(2, 1, lastRow - 1, lastColRead).getValues();
    
    Logger.log(`[${FUNCTION_NAME}] Qu√©t ${data.length} thi·∫øt b·ªã ƒë·ªÉ ki·ªÉm tra thi·∫øu Lo·∫°i/V·ªã tr√≠...`);
    
    let missingTypeCount = 0;
    let missingLocationCount = 0;

    for (let i = 0; i < data.length; i++) {
      const rowIndex = i + 2;
      const equipId = data[i][COL_EQUIP_ID - 1];
      
      // Ch·ªâ ki·ªÉm tra c√°c d√≤ng c√≥ M√£ TB
      if (equipId && equipId.toString().trim() !== "") {
        const equipType = data[i][COL_EQUIP_TYPE - 1];
        const location = data[i][COL_EQUIP_LOCATION - 1];
        const equipIdStr = equipId.toString().trim();

        // Ki·ªÉm tra thi·∫øu Lo·∫°i TB
        if (!equipType || equipType.toString().trim() === "") {
          errors.push({ 
            sheetName, 
            row: rowIndex, 
            column: COL_EQUIP_TYPE, 
            message: `Thi·∫øu 'Lo·∫°i Thi·∫øt B·ªã / Linh Ki·ªán'. (TB: ${equipIdStr}) -> HD: Ch·ªçn Lo·∫°i TB t·ª´ danh s√°ch.` 
          });
          missingTypeCount++;
        }
        
        // Ki·ªÉm tra thi·∫øu V·ªã tr√≠
        if (!location || location.toString().trim() === "") {
          errors.push({ 
            sheetName, 
            row: rowIndex, 
            column: COL_EQUIP_LOCATION, 
            message: `Thi·∫øu 'V·ªã Tr√≠'. (TB: ${equipIdStr}) -> HD: Ch·ªçn V·ªã tr√≠ t·ª´ danh s√°ch.` 
          });
          missingLocationCount++;
        }
      }
    }
    
    Logger.log(`[${FUNCTION_NAME}] K·∫øt qu·∫£: ${missingTypeCount} TB thi·∫øu Lo·∫°i, ${missingLocationCount} TB thi·∫øu V·ªã tr√≠, t·ªïng ${errors.length} v·∫•n ƒë·ªÅ.`);
  } catch (e) {
    Logger.log(`[${FUNCTION_NAME}] L·ªói: ${e}\nStack: ${e.stack}`);
    errors.push({ 
      sheetName: "H·ªá th·ªëng", 
      row: 0, 
      message: `L·ªói h·ªá th·ªëng khi ki·ªÉm tra thi·∫øu Lo·∫°i/V·ªã tr√≠: ${e.message}` 
    });
  }
  
  return errors;
}



// ===== THAY TH·∫æ H√ÄM N√ÄY TRONG FILE VALIDATION.GS =====

/**
 * [CHECK 4] T√¨m c√°c b·∫£n ghi L·ªãch s·ª≠ c√≥ M√£ ƒê·ªëi t∆∞·ª£ng/H·ªá th·ªëng kh√¥ng h·ª£p l·ªá.
 * Ki·ªÉm tra xem M√£ ·ªü C·ªôt B c√≥ t·ªìn t·∫°i trong Danh m·ª•c TB ho·∫∑c DinhNghiaHeThong kh√¥ng.
 * @return {Array<Object>} M·∫£ng c√°c object l·ªói { sheetName, row, column, message }.
 * @private
 */
function findOrphanHistoryRecords_() {
  const errors = [];
  const sheetName = HISTORY_SHEET_NAME;
  Logger.log(`--- B·∫Øt ƒë·∫ßu Check 4: Ki·ªÉm tra M√£ ƒê·ªëi t∆∞·ª£ng/H·ªá th·ªëng kh√¥ng h·ª£p l·ªá (Sheet: ${sheetName}) ---`);

  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const equipmentSheet = ss.getSheetByName(EQUIPMENT_SHEET_NAME);
    const historySheet = ss.getSheetByName(sheetName);
    const systemDefSheet = ss.getSheetByName(SHEET_DINH_NGHIA_HE_THONG);

    // Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa c√°c sheet c·∫ßn thi·∫øt
    if (!equipmentSheet || !historySheet || !systemDefSheet) {
      const missingSheet = !equipmentSheet ? EQUIPMENT_SHEET_NAME : 
                          (!historySheet ? sheetName : SHEET_DINH_NGHIA_HE_THONG);
      const message = `L·ªói Check 4: Kh√¥ng t√¨m th·∫•y Sheet "${missingSheet}".`;
      errors.push({ sheetName: "H·ªá th·ªëng", row: 0, column: 0, message });
      Logger.log(message);
      return errors;
    }

    // T·∫£i danh s√°ch M√£ h·ª£p l·ªá v√†o Sets ƒë·ªÉ tra c·ª©u nhanh
    const validEquipmentIdSet = new Set();
    const validSystemCodeSet = new Set();
    
    // 1. M√£ Thi·∫øt B·ªã
    if (equipmentSheet.getLastRow() >= 2) {
      const equipmentIds = equipmentSheet.getRange(2, COL_EQUIP_ID, equipmentSheet.getLastRow() - 1, 1).getValues();
      equipmentIds.forEach(row => {
        if (row[0]) {
          const idStr = row[0].toString().trim();
          if (idStr) validEquipmentIdSet.add(idStr);
        }
      });
    }
    Logger.log(` > Check 4: ƒê√£ t·∫£i ${validEquipmentIdSet.size} M√£ TB h·ª£p l·ªá.`);

    // 2. M√£ H·ªá th·ªëng
    if (systemDefSheet.getLastRow() >= 2) {
      const systemCodes = systemDefSheet.getRange(2, COL_HT_MA, systemDefSheet.getLastRow() - 1, 1).getValues();
      systemCodes.forEach(row => {
        if (row[0]) {
          const codeStr = row[0].toString().trim();
          if (codeStr) validSystemCodeSet.add(codeStr);
        }
      });
    }
    Logger.log(` > Check 4: ƒê√£ t·∫£i ${validSystemCodeSet.size} M√£ H·ªá th·ªëng h·ª£p l·ªá.`);

    // ƒê·ªçc d·ªØ li·ªáu t·ª´ Sheet L·ªãch s·ª≠
    const lastHistoryRow = historySheet.getLastRow();
    if (lastHistoryRow < 2) {
      Logger.log(" > Check 4: Sheet L·ªãch s·ª≠ kh√¥ng c√≥ d·ªØ li·ªáu.");
      return errors;
    }
    
    const historyData = historySheet.getRange(2, 1, lastHistoryRow - 1, 
                          Math.max(COL_HISTORY_ID, COL_HISTORY_TARGET_CODE, COL_HISTORY_EXEC_DATE)).getValues();
    Logger.log(` > Check 4: ƒê√£ ƒë·ªçc ${historyData.length} d√≤ng t·ª´ sheet L·ªãch s·ª≠.`);

    // L·∫∑p v√† ki·ªÉm tra t·ª´ng d√≤ng l·ªãch s·ª≠
    for (let i = 0; i < historyData.length; i++) {
      const rowIndex = i + 2; // S·ªë d√≤ng th·ª±c t·∫ø tr√™n sheet
      const historyId = historyData[i][COL_HISTORY_ID - 1];
      const rawTargetValue = historyData[i][COL_HISTORY_TARGET_CODE - 1];
      const execDate = historyData[i][COL_HISTORY_EXEC_DATE - 1];

      // Tr√≠ch xu·∫•t M√£ t·ª´ C·ªôt B
      let targetCode = "";
      if (rawTargetValue && typeof rawTargetValue === 'string') {
        targetCode = rawTargetValue.split(" - ")[0].trim();
      } else if (rawTargetValue) {
        targetCode = rawTargetValue.toString().trim();
      }

      if (targetCode) {
        // Ki·ªÉm tra m√£ c√≥ h·ª£p l·ªá kh√¥ng
        if (!validEquipmentIdSet.has(targetCode) && !validSystemCodeSet.has(targetCode)) {
          const message = `M√£ ƒê·ªëi t∆∞·ª£ng/H·ªá th·ªëng '${targetCode}' kh√¥ng t·ªìn t·∫°i trong Danh m·ª•c TB ho·∫∑c ƒê·ªãnh nghƒ©a H·ªá th·ªëng. HD: Ki·ªÉm tra l·∫°i m√£, c√≥ th·ªÉ ch·∫°y l·∫°i Data Validation ho·∫∑c s·ª≠a th·ªß c√¥ng.`;
          errors.push({ sheetName, row: rowIndex, column: COL_HISTORY_TARGET_CODE, message });
          Logger.log(` >> L·ªói d√≤ng ${rowIndex}: ${message}`);
        }
      } else if (historyId || execDate) {
        // D√≤ng c√≥ d·ªØ li·ªáu nh∆∞ng thi·∫øu m√£
        const message = `Thi·∫øu th√¥ng tin 'ƒê·ªëi t∆∞·ª£ng / H·ªá th·ªëng' (C·ªôt B) trong khi d√≤ng c√≥ d·ªØ li·ªáu kh√°c (ID ho·∫∑c Ng√†y TH). HD: B·ªï sung M√£ ho·∫∑c x√≥a d√≤ng n·∫øu kh√¥ng c·∫ßn thi·∫øt.`;
        errors.push({ sheetName, row: rowIndex, column: COL_HISTORY_TARGET_CODE, message });
        Logger.log(` >> L·ªói d√≤ng ${rowIndex}: ${message}`);
      }
    }

    Logger.log(`--- K·∫øt th√∫c Check 4: T√¨m th·∫•y ${errors.length} v·∫•n ƒë·ªÅ.`);
    return errors;

  } catch (e) {
    Logger.log(`L·ªói nghi√™m tr·ªçng trong findOrphanHistoryRecords_: ${e} \nStack: ${e.stack}`);
    errors.push({ 
      sheetName: "H·ªá th·ªëng", 
      row: 0, 
      column: 0, 
      message: `L·ªói h·ªá th·ªëng khi ki·ªÉm tra L·ªãch s·ª≠ m·ªì c√¥i: ${e.message}` 
    });
    return errors;
  }
}

// ===== K·∫æT TH√öC H√ÄM THAY TH·∫æ =====

// ============================================================
// T·∫†O M√É VI·∫æT T·∫ÆT (M√£ VT) T·ª∞ ƒê·ªòNG CHO SHEET SETTINGS
// ============================================================

/**
 * H√†m tr·ª£ gi√∫p ƒë·ªÉ lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát kh·ªèi chu·ªói.
 * @param {string} str Chu·ªói ƒë·∫ßu v√†o c√≥ d·∫•u.
 * @return {string} Chu·ªói ƒë·∫ßu ra kh√¥ng d·∫•u.
 * @private
 */
function removeVietnameseAccents_(str) {
  if (!str) return "";
  
  str = str.toString().toLowerCase();
  
  const replacements = {
    '√†|√°|·∫°|·∫£|√£|√¢|·∫ß|·∫•|·∫≠|·∫©|·∫´|ƒÉ|·∫±|·∫Ø|·∫∑|·∫≥|·∫µ': 'a',
    '√®|√©|·∫π|·∫ª|·∫Ω|√™|·ªÅ|·∫ø|·ªá|·ªÉ|·ªÖ': 'e',
    '√¨|√≠|·ªã|·ªâ|ƒ©': 'i',
    '√≤|√≥|·ªç|·ªè|√µ|√¥|·ªì|·ªë|·ªô|·ªï|·ªó|∆°|·ªù|·ªõ|·ª£|·ªü|·ª°': 'o',
    '√π|√∫|·ª•|·ªß|≈©|∆∞|·ª´|·ª©|·ª±|·ª≠|·ªØ': 'u',
    '·ª≥|√Ω|·ªµ|·ª∑|·ªπ': 'y',
    'ƒë': 'd'
  };
  
  for (const [pattern, replacement] of Object.entries(replacements)) {
    str = str.replace(new RegExp(pattern, 'g'), replacement);
  }
  
  return str;
}

/**
 * H√†m tr·ª£ gi√∫p ƒë·ªÉ t·∫°o M√£ VT c∆° b·∫£n t·ª´ t√™n.
 * C·ªë g·∫Øng gi·ªØ l·∫°i d·∫•u '-' n·∫øu c√≥ trong t√™n g·ªëc.
 * @param {string} text T√™n Lo·∫°i TB / V·ªã tr√≠ / B·ªô ph·∫≠n.
 * @return {string} M√£ VT c∆° b·∫£n ƒë∆∞·ª£c t·∫°o ra.
 * @private
 */
function createAcronym_(text) {
  if (!text) return "";

  // X·ª≠ l√Ω vƒÉn b·∫£n ƒë·∫ßu v√†o
  let cleanText = removeVietnameseAccents_(text); // Lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát
  cleanText = cleanText.toUpperCase();            // Chuy·ªÉn th√†nh ch·ªØ HOA

  // Chu·∫©n h√≥a vƒÉn b·∫£n
  cleanText = cleanText.replace(/[^A-Z0-9-]+/g, ' ').replace(/\s+/g, ' ').trim();
  if (!cleanText) return "";

  // T√°ch v√† x·ª≠ l√Ω t·ª´ng ph·∫ßn
  const parts = cleanText.split(' ');
  let acronym = "";
  let lastPartWasWord = false;

  // Duy·ªát qua t·ª´ng ph·∫ßn ƒë·ªÉ t·∫°o vi·∫øt t·∫Øt
  for (const part of parts) {
    if (part === "-") {
      // X·ª≠ l√Ω d·∫•u g·∫°ch ngang ƒë·ª©ng ri√™ng
      if (lastPartWasWord) {
        acronym += "-";
        lastPartWasWord = false;
      }
    } else if (part.includes("-")) {
      // X·ª≠ l√Ω t·ª´ gh√©p c√≥ g·∫°ch ngang
      const subParts = part.split('-').filter(Boolean);
      const subAcronym = subParts.map(sp => sp.length > 0 ? sp.charAt(0) : '').join('-');
      
      if (subAcronym) {
        if (lastPartWasWord) {
          acronym += "-";
        }
        acronym += subAcronym;
        lastPartWasWord = true;
      }
    } else if (part.length > 0) {
      // X·ª≠ l√Ω t·ª´ th√¥ng th∆∞·ªùng
      acronym += part.charAt(0);
      lastPartWasWord = true;
    }
  }

  // L√†m s·∫°ch k·∫øt qu·∫£ cu·ªëi c√πng
  return acronym
    .replace(/-{2,}/g, '-')
    .replace(/^-/, '')
    .replace(/-$/, '');
}


// ===== THAY TH·∫æ H√ÄM N√ÄY TRONG FILE VALIDATION.GS =====

/**
 * Qu√©t c√°c c·ªôt Gi√° tr·ªã (Lo·∫°i TB - A, V·ªã Tr√≠ - D, B·ªô ph·∫≠n - I) trong sheet C·∫•u h√¨nh,
 * n·∫øu c·ªôt M√£ VT t∆∞∆°ng ·ª©ng (B, E, J) ƒëang tr·ªëng, s·∫Ω t·ª± ƒë·ªông t·∫°o M√£ VT,
 * ƒë·∫£m b·∫£o t√≠nh duy nh·∫•t trong t·ª´ng c·ªôt, ghi l·∫°i V√Ä √ÅP D·ª§NG ƒê·ªäNH D·∫†NG CHU·∫®N.
 * ƒê∆∞·ª£c g·ªçi t·ª´ Menu t√πy ch·ªânh.
 */
function generateMissingAcronyms_Settings() {
  const FUNCTION_NAME = "generateMissingAcronyms_Settings";
  const ui = SpreadsheetApp.getUi();
  let totalUpdates = 0;
  
  try {
    Logger.log(`[${FUNCTION_NAME}] B·∫Øt ƒë·∫ßu t·∫°o M√£ VT thi·∫øu trong sheet C·∫•u h√¨nh...`);
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const settingsSheet = ss.getSheetByName(SETTINGS_SHEET_NAME);
    
    if (!settingsSheet) {
      throw new Error(`Kh√¥ng t√¨m th·∫•y Sheet "${SETTINGS_SHEET_NAME}"`);
    }

    // ƒê·ªãnh nghƒ©a c√°c c·∫∑p c·ªôt c·∫ßn x·ª≠ l√Ω
    const columnPairs = [
      { nameCol: COL_SETTINGS_LOAI_TB_GIATRI, acronymCol: COL_SETTINGS_LOAI_TB_MA, setName: "Lo·∫°i TB" },  // A -> B
      { nameCol: COL_SETTINGS_VITRI_GIATRI, acronymCol: COL_SETTINGS_VITRI_MA, setName: "V·ªã Tr√≠" },      // D -> E
      { nameCol: COL_SETTINGS_BOPHAN_GIATRI, acronymCol: COL_SETTINGS_BOPHAN_MA, setName: "B·ªô ph·∫≠n" }    // I -> J
    ];

    // X√°c ƒë·ªãnh ph·∫°m vi d·ªØ li·ªáu c·∫ßn ƒë·ªçc
    let maxCol = 0;
    columnPairs.forEach(pair => {
      maxCol = Math.max(maxCol, pair.nameCol, pair.acronymCol);
    });

    const startRow = 2;  // B·∫Øt ƒë·∫ßu t·ª´ d√≤ng 2 (sau ti√™u ƒë·ªÅ)
    const lastRow = settingsSheet.getLastRow();
    
    if (lastRow < startRow) {
      ui.alert("Sheet C·∫•u h√¨nh kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ x·ª≠ l√Ω.");
      return;
    }

    // ƒê·ªçc to√†n b·ªô d·ªØ li·ªáu m·ªôt l·∫ßn ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
    const dataRange = settingsSheet.getRange(startRow, 1, lastRow - startRow + 1, maxCol);
    const dataValues = dataRange.getValues();
    Logger.log(`[${FUNCTION_NAME}] ƒê√£ ƒë·ªçc ${dataValues.length} d√≤ng d·ªØ li·ªáu t·ª´ sheet C·∫•u h√¨nh`);

    // X·ª≠ l√Ω t·ª´ng c·∫∑p c·ªôt (Lo·∫°i TB, V·ªã tr√≠, B·ªô ph·∫≠n)
    for (const pair of columnPairs) {
      Logger.log(`[${FUNCTION_NAME}] ƒêang x·ª≠ l√Ω: ${pair.setName} (C·ªôt ${columnToLetter_(pair.nameCol)} -> ${columnToLetter_(pair.acronymCol)})`);
      
      // T·∫°o Set l∆∞u c√°c m√£ ƒë√£ t·ªìn t·∫°i ƒë·ªÉ ki·ªÉm tra tr√πng l·∫∑p
      const existingAcronyms = new Set();
      const updates = [];
      
      // Thu th·∫≠p c√°c m√£ ƒë√£ t·ªìn t·∫°i
      dataValues.forEach(row => {
        const acronymValue = row[pair.acronymCol - 1];
        if (acronymValue && acronymValue.toString().trim() !== "") {
          existingAcronyms.add(acronymValue.toString().toUpperCase());
        }
      });
      Logger.log(`[${FUNCTION_NAME}] T√¨m th·∫•y ${existingAcronyms.size} M√£ VT ${pair.setName} ƒë√£ t·ªìn t·∫°i`);

      // X·ª≠ l√Ω t·ª´ng d√≤ng ƒë·ªÉ t·∫°o m√£ c√≤n thi·∫øu
      for (let i = 0; i < dataValues.length; i++) {
        const currentRowIndex = startRow + i;
        const nameValue = dataValues[i][pair.nameCol - 1];
        const currentAcronymValue = dataValues[i][pair.acronymCol - 1];

        // Ch·ªâ x·ª≠ l√Ω c√°c d√≤ng c√≥ gi√° tr·ªã t√™n nh∆∞ng ch∆∞a c√≥ m√£
        if (nameValue && nameValue.toString().trim() !== "" && 
            (!currentAcronymValue || currentAcronymValue.toString().trim() === "")) {
          
          Logger.log(`[${FUNCTION_NAME}] ƒêang x·ª≠ l√Ω d√≤ng ${currentRowIndex}, T√™n ${pair.setName}: "${nameValue}"`);
          
          // T·∫°o m√£ c∆° b·∫£n t·ª´ t√™n
          let baseAcronym = createAcronym_(nameValue);
          if (!baseAcronym) {
            Logger.log(`[${FUNCTION_NAME}] Kh√¥ng th·ªÉ t·∫°o m√£ cho "${nameValue}". B·ªè qua.`);
            continue;
          }
          
          // ƒê·∫£m b·∫£o t√≠nh duy nh·∫•t c·ªßa m√£
          let uniqueAcronym = baseAcronym;
          let counter = 2;
          let collisionDetected = false;
          
          while (existingAcronyms.has(uniqueAcronym.toUpperCase())) {
            if (!collisionDetected) {
              Logger.log(`[${FUNCTION_NAME}] M√£ "${baseAcronym}" cho "${nameValue}" b·ªã tr√πng. Th√™m s·ªë.`);
              collisionDetected = true;
            }
            uniqueAcronym = baseAcronym + counter;
            counter++;
          }
          
          // Th√™m m√£ v·ª´a t·∫°o v√†o set ƒë·ªÉ tr√°nh tr√πng l·∫∑p trong c√πng ƒë·ª£t x·ª≠ l√Ω
          existingAcronyms.add(uniqueAcronym.toUpperCase());
          updates.push({ rowIndex: currentRowIndex, acronym: uniqueAcronym });
          
          if (collisionDetected) {
            Logger.log(`[${FUNCTION_NAME}] ƒê√£ t·∫°o m√£ "${uniqueAcronym}" (t·ª´ "${baseAcronym}") sau khi x·ª≠ l√Ω tr√πng l·∫∑p`);
          } else {
            Logger.log(`[${FUNCTION_NAME}] ƒê√£ t·∫°o m√£: "${uniqueAcronym}"`);
          }
        }
      }

      // Th·ª±c hi·ªán c·∫≠p nh·∫≠t v√† ƒë·ªãnh d·∫°ng cho t·∫•t c·∫£ c√°c m√£ ƒë√£ t·∫°o
      if (updates.length > 0) {
        Logger.log(`[${FUNCTION_NAME}] C·∫≠p nh·∫≠t ${updates.length} M√£ VT ${pair.setName}...`);
        
        for (const update of updates) {
          try {
            const cell = settingsSheet.getRange(update.rowIndex, pair.acronymCol);
            cell.setValue(update.acronym);
            
            // √Åp d·ª•ng ƒë·ªãnh d·∫°ng chu·∫©n
            cell.setFontSize(12)
                .setVerticalAlignment("middle")
                .setHorizontalAlignment("center")
                .setWrapStrategy(SpreadsheetApp.WrapStrategy.WRAP);
          } catch (e) {
            Logger.log(`[${FUNCTION_NAME}] L·ªói c·∫≠p nh·∫≠t m√£ "${update.acronym}" t·∫°i d√≤ng ${update.rowIndex}: ${e}`);
          }
        }
        
        totalUpdates += updates.length;
        // ƒê·∫£m b·∫£o d·ªØ li·ªáu ƒë∆∞·ª£c ghi v√†o sheet sau m·ªói c·∫∑p c·ªôt
        SpreadsheetApp.flush();
      } else {
        Logger.log(`[${FUNCTION_NAME}] Kh√¥ng c√≥ M√£ VT ${pair.setName} n√†o c·∫ßn t·∫°o m·ªõi`);
      }
    }

    // Th√¥ng b√°o k·∫øt qu·∫£
    const message = totalUpdates > 0
      ? `ƒê√£ t·∫°o, c·∫≠p nh·∫≠t v√† ƒë·ªãnh d·∫°ng ${totalUpdates} M√£ VT trong sheet C·∫•u h√¨nh.`
      : "Kh√¥ng t√¨m th·∫•y M√£ VT n√†o c·∫ßn t·∫°o m·ªõi trong sheet C·∫•u h√¨nh.";
    
    ui.alert(message);
    Logger.log(`[${FUNCTION_NAME}] Ho√†n th√†nh. ${message}`);

  } catch (e) {
    Logger.log(`[${FUNCTION_NAME}] L·ªói: ${e}\nStack: ${e.stack}`);
    ui.alert(`ƒê√£ x·∫£y ra l·ªói: ${e.message}. Vui l√≤ng ki·ªÉm tra Log.`);
  }
}



// ===== ƒê·ªìng b·ªô H·ªá th·ªëng C∆° b·∫£n cho V·ªã tr√≠ m·ªõi v√†o DinhNghiaHeThong =====

// ===== THAY TH·∫æ HO√ÄN TO√ÄN H√ÄM N√ÄY TRONG FILE VALIDATION.GS =====

/**
 * ƒê·ªìng b·ªô H·ªá th·ªëng C∆° b·∫£n v√†o sheet DinhNghiaHeThong d·ª±a tr√™n sheet C·∫•u h√¨nh.
 * 1. X√≥a c√°c m√£ h·ªá th·ªëng c∆° b·∫£n "m·ªì c√¥i" (c√≥ ti·ªÅn t·ªë c∆° b·∫£n, c√≥ m√£ v·ªã tr√≠ nh∆∞ng v·ªã tr√≠ ƒë√≥ kh√¥ng c√≤n t·ªìn t·∫°i).
 * 2. Th√™m c√°c m√£ h·ªá th·ªëng c∆° b·∫£n c√≤n thi·∫øu cho c√°c v·ªã tr√≠ h·ª£p l·ªá hi·ªán c√≥, d·ª±a tr√™n "Lo·∫°i V·ªã Tr√≠" ƒë·ªÉ lo·∫°i tr·ª´ c√°c h·ªá th·ªëng kh√¥ng ph√π h·ª£p.
 * KH√îNG X√ìA c√°c m√£ ƒë∆∞·ª£c nh·∫≠p th·ªß c√¥ng (kh√¥ng kh·ªõp v·ªõi m·∫´u c∆° b·∫£n).
 * ƒê∆∞·ª£c g·ªçi t·ª´ Menu.
 */
function syncBasicSystemsForNewLocations() {
  const FUNCTION_NAME = "syncBasicSystemsForNewLocations";
  const ui = SpreadsheetApp.getUi();
  
  Logger.log(`===== B·∫Øt ƒë·∫ßu ${FUNCTION_NAME} =====`);
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const configSheet = ss.getSheetByName(SETTINGS_SHEET_NAME);
    const systemDefSheet = ss.getSheetByName(SHEET_DINH_NGHIA_HE_THONG);

    if (!configSheet || !systemDefSheet) {
      throw new Error(`Kh√¥ng t√¨m th·∫•y sheet "${SETTINGS_SHEET_NAME}" ho·∫∑c "${SHEET_DINH_NGHIA_HE_THONG}".`);
    }
    
    // Ki·ªÉm tra h·∫±ng s·ªë Lo·∫°i V·ªã Tr√≠
    if (typeof COL_SETTINGS_VITRI_TYPE === 'undefined') {
      throw new Error("L·ªói c·∫•u h√¨nh: Thi·∫øu khai b√°o h·∫±ng s·ªë COL_SETTINGS_VITRI_TYPE trong Config.gs.");
    }

    // --- ƒê·ªãnh nghƒ©a c√°c m·∫´u h·ªá th·ªëng c∆° b·∫£n V√Ä quy t·∫Øc lo·∫°i tr·ª´ ---
    const basicSystems = [
      { prefix: "HT-DIEN-CS-", descTemplate: "H·ªá th·ªëng ƒêi·ªán Chi·∫øu s√°ng - ", excludeTypes: [] }, // √Åp d·ª•ng cho m·ªçi lo·∫°i
      { prefix: "HT-DIEN-OC-", descTemplate: "H·ªá th·ªëng ƒêi·ªán ·ªî c·∫Øm - ", excludeTypes: [] }, // √Åp d·ª•ng cho m·ªçi lo·∫°i
      { prefix: "HT-NUOC-CAP-", descTemplate: "H·ªá th·ªëng C·∫•p n∆∞·ªõc - ", excludeTypes: ["Ph√≤ng th·ªù", "Kho", "S√¢n", "Ngo√†i tr·ªùi"] }, // V√≠ d·ª• lo·∫°i tr·ª´
      { prefix: "HT-NUOC-THOAT-", descTemplate: "H·ªá th·ªëng Tho√°t n∆∞·ªõc (S√†n/Chung) - ", excludeTypes: ["Ph√≤ng th·ªù", "VƒÉn ph√≤ng", "Ph√≤ng h·ªçp"] }, // V√≠ d·ª• lo·∫°i tr·ª´
      { prefix: "TB-DENUV-", descTemplate: "Thi·∫øt b·ªã ƒê√®n UV - ", excludeTypes: ["Ph√≤ng th·ªù", "WC", "H√†nh lang", "S√¢n", "Ngo√†i tr·ªùi", "Khu v·ª±c chung"] }, // V√≠ d·ª• lo·∫°i tr·ª´
      { prefix: "TB-DENCT-", descTemplate: "Thi·∫øt b·ªã ƒê√®n Di·ªát c√¥n tr√πng - ", excludeTypes: ["Ph√≤ng th·ªù", "WC", "Ph√≤ng h·ªçp", "VƒÉn ph√≤ng"] }, // V√≠ d·ª• lo·∫°i tr·ª´
      { prefix: "HT-PCCC-KV-", descTemplate: "H·ªá th·ªëng PCCC Khu v·ª±c - ", excludeTypes: ["WC", "Ph√≤ng th·ªù"] }, // V√≠ d·ª• lo·∫°i tr·ª´
      { prefix: "HT-HVAC-THONGGIO-", descTemplate: "H·ªá th·ªëng Th√¥ng gi√≥ - ", excludeTypes: ["Ngo√†i tr·ªùi", "S√¢n"] }, // V√≠ d·ª• lo·∫°i tr·ª´
      { prefix: "HT-HVAC-HUTMUI-", descTemplate: "H·ªá th·ªëng H√∫t m√πi/Kh√≥i - ", excludeTypes: ["VƒÉn ph√≤ng", "Ph√≤ng h·ªçp", "H√†nh lang", "Ph√≤ng th·ªù", "WC", "Ngo√†i tr·ªùi", "S√¢n", "Khu v·ª±c chung"]} // Ch·ªâ √°p d·ª•ng cho n∆°i c√≥ kh·∫£ nƒÉng ph√°t sinh m√πi/kh√≥i
    ];
    
    // T·∫°o m·ªôt Set ch·ª©a c√°c ti·ªÅn t·ªë c∆° b·∫£n ƒë·ªÉ ki·ªÉm tra khi x√≥a
    const basicPrefixes = new Set(basicSystems.map(sys => sys.prefix));

    // --- 1. ƒê·ªçc d·ªØ li·ªáu v√† chu·∫©n b·ªã ---
    // ƒê·ªçc V·ªã tr√≠ h·ª£p l·ªá (T√™n, M√£ VT, Lo·∫°i) t·ª´ C·∫•u h√¨nh
    const locations = []; // [{ name: '...', acronym: '...', type: '...' }]
    const validLocationAcronyms = new Set();
    const lastConfigRow = configSheet.getLastRow();
    
    if (lastConfigRow >= 2) {
      const locationData = configSheet.getRange(2, 1, lastConfigRow - 1, Math.max(COL_SETTINGS_VITRI_GIATRI, COL_SETTINGS_VITRI_MA, COL_SETTINGS_VITRI_TYPE)).getValues();
      locationData.forEach(row => {
        const locName = row[COL_SETTINGS_VITRI_GIATRI - 1] ? row[COL_SETTINGS_VITRI_GIATRI - 1].toString().trim() : null;
        const locAcronym = row[COL_SETTINGS_VITRI_MA - 1] ? row[COL_SETTINGS_VITRI_MA - 1].toString().trim() : null;
        const locType = row[COL_SETTINGS_VITRI_TYPE - 1] ? row[COL_SETTINGS_VITRI_TYPE - 1].toString().trim() : null;
        
        if (locName && locAcronym) { // Ch·ªâ l·∫•y nh·ªØng v·ªã tr√≠ c√≥ ƒë·ªß T√™n v√† M√£ VT
          locations.push({ name: locName, acronym: locAcronym, type: locType || "" });
          validLocationAcronyms.add(locAcronym);
        }
      });
    }
    
    Logger.log(`[${FUNCTION_NAME}] ƒê√£ ƒë·ªçc ${locations.length} v·ªã tr√≠ h·ª£p l·ªá t·ª´ C·∫•u h√¨nh.`);

    // ƒê·ªçc M√£ H·ªá th·ªëng v√† M√¥ t·∫£ hi·ªán c√≥ t·ª´ DinhNghiaHeThong
    const systemDefData = []; // [{ code: '...', description: '...', rowNum: R }]
    const existingSystemCodes = new Set();
    const lastSystemRow = systemDefSheet.getLastRow();
    
    if (lastSystemRow >= 2) {
      const systemValues = systemDefSheet.getRange(2, 1, lastSystemRow - 1, 2).getValues();
      systemValues.forEach((row, index) => {
        const code = row[0] ? row[0].toString().trim() : null;
        if (code) {
          systemDefData.push({ code: code, description: row[1] || "", rowNum: index + 2 });
          existingSystemCodes.add(code);
        }
      });
    }
    
    Logger.log(`[${FUNCTION_NAME}] ƒê√£ ƒë·ªçc ${systemDefData.length} m√£ h·ªá th·ªëng hi·ªán c√≥ t·ª´ DinhNghiaHeThong.`);

    // --- 2. T√¨m v√† x·ª≠ l√Ω c√°c m√£ h·ªá th·ªëng c∆° b·∫£n "m·ªì c√¥i" ---
    const rowsToDelete = []; // Ch·ª©a s·ªë th·ª© t·ª± d√≤ng c·∫ßn x√≥a
    
    systemDefData.forEach(system => {
      // Ki·ªÉm tra xem m√£ c√≥ ph·∫£i l√† m√£ h·ªá th·ªëng c∆° b·∫£n kh√¥ng
      const isBasicSystem = Array.from(basicPrefixes).some(prefix => system.code.startsWith(prefix));
      
      if (isBasicSystem) {
        // T√¨m v·ªã tr√≠ trong m√£ (ph·∫ßn sau ti·ªÅn t·ªë)
        let locationCode = null;
        for (const prefix of basicPrefixes) {
          if (system.code.startsWith(prefix)) {
            locationCode = system.code.substring(prefix.length);
            break;
          }
        }
        
        // N·∫øu t√¨m ƒë∆∞·ª£c locationCode v√† n√≥ kh√¥ng t·ªìn t·∫°i trong danh s√°ch v·ªã tr√≠ h·ª£p l·ªá
        if (locationCode && !validLocationAcronyms.has(locationCode)) {
          rowsToDelete.push(system.rowNum);
          Logger.log(`[${FUNCTION_NAME}] ƒê√°nh d·∫•u ƒë·ªÉ x√≥a m√£ h·ªá th·ªëng m·ªì c√¥i: ${system.code} (d√≤ng ${system.rowNum}) - M√£ v·ªã tr√≠ '${locationCode}' kh√¥ng c√≤n h·ª£p l·ªá.`);
        }
      }
    });
    
    // X√≥a c√°c d√≤ng theo th·ª© t·ª± t·ª´ d∆∞·ªõi l√™n ƒë·ªÉ tr√°nh shift index
    if (rowsToDelete.length > 0) {
      rowsToDelete.sort((a, b) => b - a); // S·∫Øp x·∫øp gi·∫£m d·∫ßn
      
      for (const rowNum of rowsToDelete) {
        systemDefSheet.deleteRow(rowNum);
      }
      
      Logger.log(`[${FUNCTION_NAME}] ƒê√£ x√≥a ${rowsToDelete.length} m√£ h·ªá th·ªëng m·ªì c√¥i.`);
      SpreadsheetApp.flush();
    } else {
      Logger.log(`[${FUNCTION_NAME}] Kh√¥ng t√¨m th·∫•y m√£ h·ªá th·ªëng m·ªì c√¥i n√†o c·∫ßn x√≥a.`);
    }
    
    // --- 3. T·∫°o v√† th√™m c√°c m√£ h·ªá th·ªëng c∆° b·∫£n c√≤n thi·∫øu cho c√°c v·ªã tr√≠ h·ª£p l·ªá ---
    const newSystemRows = []; // M·∫£ng ch·ª©a c√°c d√≤ng s·∫Ω th√™m v√†o sheet
    
    // L·∫∑p qua t·ª´ng v·ªã tr√≠
    locations.forEach(location => {
      // L·∫∑p qua t·ª´ng m·∫´u h·ªá th·ªëng c∆° b·∫£n
      basicSystems.forEach(system => {
        // Ki·ªÉm tra xem lo·∫°i v·ªã tr√≠ c√≥ b·ªã lo·∫°i tr·ª´ kh√¥ng
        const shouldExclude = system.excludeTypes.some(excludeType => 
          location.type.toLowerCase() === excludeType.toLowerCase());
        
        if (!shouldExclude) {
          // T·∫°o m√£ h·ªá th·ªëng m·ªõi
          const newSystemCode = system.prefix + location.acronym;
          
          // Ki·ªÉm tra xem m√£ n√†y ƒë√£ t·ªìn t·∫°i ch∆∞a
          if (!existingSystemCodes.has(newSystemCode)) {
            // T·∫°o m√¥ t·∫£
            const newSystemDesc = system.descTemplate + location.name;
            
            // Th√™m v√†o danh s√°ch ch·ªù
            newSystemRows.push([newSystemCode, newSystemDesc]);
            existingSystemCodes.add(newSystemCode); // Th√™m v√†o set ƒë·ªÉ tr√°nh tr√πng l·∫∑p
            Logger.log(`[${FUNCTION_NAME}] T·∫°o m√£ h·ªá th·ªëng m·ªõi: ${newSystemCode} - ${newSystemDesc}`);
          }
        }
      });
    });
    
    // Th√™m c√°c d√≤ng m·ªõi v√†o sheet
    if (newSystemRows.length > 0) {
      const lastRow = systemDefSheet.getLastRow();
      systemDefSheet.getRange(lastRow + 1, 1, newSystemRows.length, 2).setValues(newSystemRows);
      
      // √Åp d·ª•ng ƒë·ªãnh d·∫°ng cho c√°c d√≤ng m·ªõi
      try {
        const newRowsRange = systemDefSheet.getRange(lastRow + 1, 1, newSystemRows.length, 2);
        newRowsRange.setFontSize(11)
                   .setVerticalAlignment("middle");
      } catch (formatErr) {
        Logger.log(`[${FUNCTION_NAME}] L·ªói khi ƒë·ªãnh d·∫°ng c√°c d√≤ng m·ªõi: ${formatErr}`);
      }
      
      Logger.log(`[${FUNCTION_NAME}] ƒê√£ th√™m ${newSystemRows.length} m√£ h·ªá th·ªëng m·ªõi.`);
    } else {
      Logger.log(`[${FUNCTION_NAME}] Kh√¥ng c√≥ m√£ h·ªá th·ªëng m·ªõi n√†o c·∫ßn th√™m.`);
    }
    
    // --- 4. S·∫Øp x·∫øp sheet ---
    try {
      if (systemDefSheet.getLastRow() > 2) {
        systemDefSheet.getRange(2, 1, systemDefSheet.getLastRow() - 1, 2).sort({column: 1, ascending: true});
        Logger.log(`[${FUNCTION_NAME}] ƒê√£ s·∫Øp x·∫øp l·∫°i c√°c m√£ h·ªá th·ªëng theo th·ª© t·ª± A-Z.`);
      }
    } catch (sortErr) {
      Logger.log(`[${FUNCTION_NAME}] Kh√¥ng th·ªÉ s·∫Øp x·∫øp sheet: ${sortErr}`);
    }
    
    // --- 5. Th√¥ng b√°o k·∫øt qu·∫£ ---
    ui.alert(`ƒê·ªìng b·ªô ho√†n t·∫•t:\n- ƒê√£ x√≥a ${rowsToDelete.length} m√£ h·ªá th·ªëng m·ªì c√¥i.\n- ƒê√£ th√™m ${newSystemRows.length} m√£ h·ªá th·ªëng m·ªõi.`);
    
    Logger.log(`===== K·∫øt th√∫c ${FUNCTION_NAME} =====`);
    
  } catch (e) {
    Logger.log(`[${FUNCTION_NAME}] L·ªói: ${e}\nStack: ${e.stack}`);
    ui.alert(`ƒê√£ x·∫£y ra l·ªói: ${e.message}`);
  }
}


// ===== TH√äM C√ÅC H√ÄM M·ªöI N√ÄY V√ÄO CU·ªêI FILE VALIDATION.GS =====

/**
 * [CHECK M·ªöI] T√¨m c√°c d√≤ng c√≥ Ng√†y BT Ti·∫øp theo kh√¥ng nh·∫•t qu√°n v·ªõi Ng√†y BT cu·ªëi v√† T·∫ßn su·∫•t.
 * @return {Array<Object>} M·∫£ng c√°c object l·ªói { sheetName, row, column, message }.
 * @private
 */
function findInconsistentMaintDates_() {
  const FUNCTION_NAME = "findInconsistentMaintDates_";
  const errors = [];
  const sheetName = EQUIPMENT_SHEET_NAME;
  
  Logger.log(`--- B·∫Øt ƒë·∫ßu ${FUNCTION_NAME}: Ki·ªÉm tra Ng√†y B·∫£o tr√¨ kh√¥ng nh·∫•t qu√°n (Sheet: ${sheetName}) ---`);

  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const equipmentSheet = ss.getSheetByName(sheetName);
    
    // Ki·ªÉm tra sheet c√≥ t·ªìn t·∫°i kh√¥ng
    if (!equipmentSheet) {
      const errorMsg = `L·ªói ${FUNCTION_NAME}: Kh√¥ng t√¨m th·∫•y Sheet "${sheetName}".`;
      errors.push({ 
        sheetName: "H·ªá th·ªëng", 
        row: 0, 
        column: 0, 
        message: errorMsg
      });
      Logger.log(errorMsg);
      return errors;
    }
    
    // Ki·ªÉm tra h√†m calculateNextMaintenanceDate c√≥ t·ªìn t·∫°i kh√¥ng
    if (typeof calculateNextMaintenanceDate !== 'function') {
      const errorMsg = `L·ªói ${FUNCTION_NAME}: Kh√¥ng t√¨m th·∫•y h√†m 'calculateNextMaintenanceDate'. C·∫ßn ki·ªÉm tra file Calculations.gs.`;
      errors.push({ 
        sheetName: "H·ªá th·ªëng", 
        row: 0, 
        column: 0, 
        message: errorMsg
      });
      Logger.log(errorMsg);
      return errors;
    }

    // X√°c ƒë·ªãnh ph·∫°m vi d·ªØ li·ªáu c·∫ßn ƒë·ªçc
    const lastColNeeded = Math.max(COL_EQUIP_ID, COL_EQUIP_MAINT_FREQ, COL_EQUIP_MAINT_LAST, COL_EQUIP_MAINT_NEXT);
    const startRow = 2;
    const lastRow = equipmentSheet.getLastRow();

    // Ki·ªÉm tra sheet c√≥ d·ªØ li·ªáu kh√¥ng
    if (lastRow < startRow) {
      Logger.log(`${FUNCTION_NAME}: Sheet ${sheetName} kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ ki·ªÉm tra.`);
      return errors;
    }

    // ƒê·ªçc d·ªØ li·ªáu t·ª´ sheet
    const data = equipmentSheet.getRange(startRow, 1, lastRow - startRow + 1, lastColNeeded).getValues();
    Logger.log(`${FUNCTION_NAME}: ƒê√£ ƒë·ªçc ${data.length} d√≤ng t·ª´ sheet ${sheetName}.`);

    // ƒê·∫øm s·ªë l∆∞·ª£ng ƒë·ªÉ th·ªëng k√™
    let inconsistentCount = 0;
    let missingCount = 0;
    let invalidFormatCount = 0;

    // Ki·ªÉm tra t·ª´ng d√≤ng d·ªØ li·ªáu
    for (let i = 0; i < data.length; i++) {
      const rowIndex = startRow + i;
      const equipId = data[i][COL_EQUIP_ID - 1];
      const maintFreq = data[i][COL_EQUIP_MAINT_FREQ - 1]; // C·ªôt Q (17)
      const lastMaintDateRaw = data[i][COL_EQUIP_MAINT_LAST - 1]; // C·ªôt R (18)
      const nextMaintDateRaw = data[i][COL_EQUIP_MAINT_NEXT - 1]; // C·ªôt S (19)

      // Ch·ªâ ki·ªÉm tra n·∫øu c√≥ ƒë·ªß d·ªØ li·ªáu c·∫ßn thi·∫øt
      if (equipId && lastMaintDateRaw instanceof Date && maintFreq && maintFreq.toString().trim() !== "") {
        const lastMaintDate = new Date(lastMaintDateRaw);
        lastMaintDate.setHours(0, 0, 0, 0); // Chu·∫©n h√≥a v·ªÅ ƒë·∫ßu ng√†y
        
        const nextMaintDate = (nextMaintDateRaw instanceof Date) ? new Date(nextMaintDateRaw) : null;
        if (nextMaintDate) nextMaintDate.setHours(0, 0, 0, 0); // Chu·∫©n h√≥a n·∫øu kh√¥ng null

        // T√≠nh ng√†y ti·∫øp theo d·ª± ki·∫øn
        let calculatedNextDate = null;
        try {
          calculatedNextDate = calculateNextMaintenanceDate(lastMaintDate, maintFreq.toString().trim());
          if (calculatedNextDate instanceof Date) {
            calculatedNextDate.setHours(0, 0, 0, 0); // Chu·∫©n h√≥a k·∫øt qu·∫£ t√≠nh to√°n
          }
        } catch (calcError) {
          Logger.log(`${FUNCTION_NAME} >> L·ªói khi t√≠nh ng√†y BT ti·∫øp theo cho TB ${equipId} d√≤ng ${rowIndex}: ${calcError}`);
        }

        // X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p l·ªói
        if (calculatedNextDate instanceof Date) {
          // TH1: C√≥ th·ªÉ t√≠nh ƒë∆∞·ª£c ng√†y d·ª± ki·∫øn v√† ƒë√£ c√≥ ng√†y trong c·ªôt S, nh∆∞ng kh√¥ng kh·ªõp nhau
          if (nextMaintDate instanceof Date && calculatedNextDate.getTime() !== nextMaintDate.getTime()) {
            const formattedCalcDate = Utilities.formatDate(calculatedNextDate, Session.getScriptTimeZone(), "dd/MM/yyyy");
            const formattedNextDate = Utilities.formatDate(nextMaintDate, Session.getScriptTimeZone(), "dd/MM/yyyy");
            
            const message = `Ng√†y BT Ti·∫øp theo (${formattedNextDate}) kh√¥ng kh·ªõp v·ªõi t√≠nh to√°n (${formattedCalcDate}) d·ª±a tr√™n Ng√†y BT cu·ªëi v√† T·∫ßn su·∫•t "${maintFreq}". HD: Ch·∫°y menu "üóìÔ∏è T√≠nh & C·∫≠p nh·∫≠t Ng√†y BT Ti·∫øp theo (TB)" ho·∫∑c c·∫≠p nh·∫≠t th·ªß c√¥ng.`;
            
            errors.push({ 
              sheetName, 
              row: rowIndex, 
              column: COL_EQUIP_MAINT_NEXT, 
              message 
            });
            
            inconsistentCount++;
            Logger.log(`${FUNCTION_NAME} >> Kh√¥ng kh·ªõp (TB: ${equipId}) d√≤ng ${rowIndex}: ${message}`);
          } 
          // TH2: C√≥ th·ªÉ t√≠nh ƒë∆∞·ª£c ng√†y d·ª± ki·∫øn nh∆∞ng c·ªôt S tr·ªëng
          else if (!nextMaintDate) {
            const formattedCalcDate = Utilities.formatDate(calculatedNextDate, Session.getScriptTimeZone(), "dd/MM/yyyy");
            
            const message = `C·ªôt Ng√†y BT Ti·∫øp theo ƒëang tr·ªëng trong khi c√≥ th·ªÉ t√≠nh to√°n ƒë∆∞·ª£c: ${formattedCalcDate} (t·ª´ Ng√†y BT cu·ªëi v√† T·∫ßn su·∫•t "${maintFreq}"). HD: Ch·∫°y menu "üóìÔ∏è T√≠nh & C·∫≠p nh·∫≠t Ng√†y BT Ti·∫øp theo (TB)".`;
            
            errors.push({ 
              sheetName, 
              row: rowIndex, 
              column: COL_EQUIP_MAINT_NEXT, 
              message 
            });
            
            missingCount++;
            Logger.log(`${FUNCTION_NAME} >> Thi·∫øu ng√†y (TB: ${equipId}) d√≤ng ${rowIndex}: ƒê·ªÅ xu·∫•t ${formattedCalcDate}`);
          }
        } 
        // TH3: C√≥ Ng√†y BT cu·ªëi v√† T·∫ßn su·∫•t nh∆∞ng kh√¥ng t√≠nh ƒë∆∞·ª£c ng√†y d·ª± ki·∫øn
        else if (lastMaintDate && maintFreq) {
          const message = `Kh√¥ng th·ªÉ t√≠nh Ng√†y BT Ti·∫øp theo. ƒê·ªãnh d·∫°ng T·∫ßn su·∫•t "${maintFreq}" c√≥ th·ªÉ kh√¥ng h·ª£p l·ªá. HD: Ki·ªÉm tra l·∫°i chu·ªói t·∫ßn su·∫•t (vd: '3 th√°ng', '1 nƒÉm', 'H√†ng tu·∫ßn').`;
          
          errors.push({ 
            sheetName, 
            row: rowIndex, 
            column: COL_EQUIP_MAINT_FREQ, 
            message 
          });
          
          invalidFormatCount++;
          Logger.log(`${FUNCTION_NAME} >> ƒê·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá (TB: ${equipId}) d√≤ng ${rowIndex}: "${maintFreq}"`);
        }
      }
    }

    // T·ªïng k·∫øt k·∫øt qu·∫£ ki·ªÉm tra
    const totalIssues = inconsistentCount + missingCount + invalidFormatCount;
    Logger.log(`--- K·∫øt th√∫c ${FUNCTION_NAME}: T√¨m th·∫•y ${totalIssues} v·∫•n ƒë·ªÅ.`);
    Logger.log(`   - ${inconsistentCount} kh√¥ng kh·ªõp`);
    Logger.log(`   - ${missingCount} thi·∫øu ng√†y`);
    Logger.log(`   - ${invalidFormatCount} ƒë·ªãnh d·∫°ng t·∫ßn su·∫•t kh√¥ng h·ª£p l·ªá`);
    
    return errors;

  } catch (e) {
    const errorMsg = `L·ªói nghi√™m tr·ªçng trong ${FUNCTION_NAME}: ${e}\nStack: ${e.stack}`;
    Logger.log(errorMsg);
    errors.push({ 
      sheetName: "H·ªá th·ªëng", 
      row: 0, 
      column: 0, 
      message: `L·ªói h·ªá th·ªëng khi ki·ªÉm tra Ng√†y B·∫£o tr√¨: ${e.message}` 
    });
    return errors;
  }
}



/**
 * [CHECK M·ªöI] T√¨m c√°c d√≤ng trong Danh m·ª•c TB c√≥ M√£ L√¥ Mua H√†ng kh√¥ng h·ª£p l·ªá.
 * Ki·ªÉm tra xem M√£ L√¥ MH ·ªü C·ªôt J (TB) c√≥ t·ªìn t·∫°i trong C·ªôt A (Mua H√†ng) kh√¥ng.
 * @return {Array<Object>} M·∫£ng c√°c object l·ªói { sheetName, row, column, message }.
 * @private
 */
function findInvalidPurchaseLinks_() {
  const FUNCTION_NAME = "findInvalidPurchaseLinks_";
  const errors = [];
  const equipSheetName = EQUIPMENT_SHEET_NAME;
  const purchaseSheetName = PURCHASE_SHEET_NAME;
  
  Logger.log(`--- B·∫Øt ƒë·∫ßu ${FUNCTION_NAME}: Ki·ªÉm tra M√£ L√¥ Mua H√†ng kh√¥ng h·ª£p l·ªá (Sheet: ${equipSheetName}) ---`);

  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const equipmentSheet = ss.getSheetByName(equipSheetName);
    const purchaseSheet = ss.getSheetByName(purchaseSheetName);

    // Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa c√°c sheet c·∫ßn thi·∫øt
    if (!equipmentSheet || !purchaseSheet) {
      const missingSheet = !equipmentSheet ? equipSheetName : purchaseSheetName;
      const errorMsg = `L·ªói ${FUNCTION_NAME}: Kh√¥ng t√¨m th·∫•y Sheet "${missingSheet}".`;
      errors.push({ 
        sheetName: "H·ªá th·ªëng", 
        row: 0, 
        column: 0, 
        message: errorMsg
      });
      Logger.log(errorMsg);
      return errors;
    }

    // T·∫°o Set ch·ª©a danh s√°ch M√£ L√¥ Mua H√†ng h·ª£p l·ªá
    const validPurchaseIdSet = new Set();
    let purchaseIdCount = 0;
    
    if (purchaseSheet.getLastRow() >= 2) {
      const purchaseIds = purchaseSheet.getRange(2, COL_PURCHASE_ID, purchaseSheet.getLastRow() - 1, 1).getValues();
      purchaseIds.forEach(row => {
        if (row[0]) {
          const idStr = row[0].toString().trim();
          if (idStr) {
            validPurchaseIdSet.add(idStr);
            purchaseIdCount++;
          }
        }
      });
    }
    
    Logger.log(`${FUNCTION_NAME}: ƒê√£ t·∫£i ${purchaseIdCount} M√£ L√¥ MH h·ª£p l·ªá t·ª´ sheet "${purchaseSheetName}".`);

    // ƒê·ªçc d·ªØ li·ªáu t·ª´ Sheet Danh m·ª•c Thi·∫øt b·ªã
    const lastEquipRow = equipmentSheet.getLastRow();
    if (lastEquipRow < 2) {
      Logger.log(`${FUNCTION_NAME}: Sheet ${equipSheetName} kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ ki·ªÉm tra.`);
      return errors;
    }
    
    // ƒê·ªçc c√°c c·ªôt c·∫ßn thi·∫øt: ID(A) v√† M√£ L√¥ MH(J)
    const equipData = equipmentSheet.getRange(2, 1, lastEquipRow - 1, COL_EQUIP_PURCHASE_ID).getValues();
    Logger.log(`${FUNCTION_NAME}: ƒê√£ ƒë·ªçc ${equipData.length} d√≤ng t·ª´ sheet "${equipSheetName}".`);

    // Th·ªëng k√™
    let checkedCount = 0;
    let invalidCount = 0;

    // Ki·ªÉm tra t·ª´ng d√≤ng thi·∫øt b·ªã
    for (let i = 0; i < equipData.length; i++) {
      const rowIndex = i + 2;
      const equipId = equipData[i][COL_EQUIP_ID - 1]; // D·ªØ li·ªáu c·ªôt A
      const purchaseIdRaw = equipData[i][COL_EQUIP_PURCHASE_ID - 1]; // D·ªØ li·ªáu c·ªôt J

      // Ch·ªâ ki·ªÉm tra khi c√≥ gi√° tr·ªã M√£ L√¥ MH
      if (purchaseIdRaw && purchaseIdRaw.toString().trim() !== "") {
        const purchaseId = purchaseIdRaw.toString().trim();
        checkedCount++;
        
        // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa M√£ L√¥ MH
        if (!validPurchaseIdSet.has(purchaseId)) {
          const message = `M√£ L√¥ Mua H√†ng '${purchaseId}' kh√¥ng t·ªìn t·∫°i trong sheet '${purchaseSheetName}'. HD: Ki·ªÉm tra l·∫°i M√£ L√¥ ho·∫∑c th√¥ng tin b√™n sheet Mua H√†ng.`;
          errors.push({ 
            sheetName: equipSheetName, 
            row: rowIndex, 
            column: COL_EQUIP_PURCHASE_ID, 
            message 
          });
          
          invalidCount++;
          Logger.log(`${FUNCTION_NAME} >> TB ${equipId || 'Kh√¥ng c√≥ ID'} (d√≤ng ${rowIndex}): M√£ L√¥ MH '${purchaseId}' kh√¥ng h·ª£p l·ªá.`);
        }
      }
    }

    // T·ªïng k·∫øt k·∫øt qu·∫£
    Logger.log(`--- K·∫øt th√∫c ${FUNCTION_NAME}: ƒê√£ ki·ªÉm tra ${checkedCount} M√£ L√¥ MH, t√¨m th·∫•y ${invalidCount} v·∫•n ƒë·ªÅ.`);
    return errors;

  } catch (e) {
    const errorMsg = `L·ªói nghi√™m tr·ªçng trong ${FUNCTION_NAME}: ${e}\nStack: ${e.stack}`;
    Logger.log(errorMsg);
    errors.push({ 
      sheetName: "H·ªá th·ªëng", 
      row: 0, 
      column: 0, 
      message: `L·ªói h·ªá th·ªëng khi ki·ªÉm tra M√£ L√¥ Mua H√†ng: ${e.message}` 
    });
    return errors;
  }
}

// ===== K·∫æT TH√öC PH·∫¶N TH√äM H√ÄM M·ªöI =====


/**
 * X√≥a c√°c d√≤ng thi·∫øt b·ªã tr√πng m√£ trong sheet Danh m·ª•c Thi·∫øt b·ªã (gi·ªØ l·∫°i d√≤ng ƒë·∫ßu ti√™n).
 */
function cleanDuplicateEquipmentRows() {
  const ui = SpreadsheetApp.getUi();
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(EQUIPMENT_SHEET_NAME);
    if (!sheet) throw new Error(`Kh√¥ng t√¨m th·∫•y sheet "${EQUIPMENT_SHEET_NAME}"`);
    const data = sheet.getDataRange().getValues();
    const seen = new Set();
    let rowsToDelete = [];
    for (let i = 1; i < data.length; i++) { // B·ªè qua header
      const id = data[i][COL_EQUIP_ID - 1];
      if (id && seen.has(id)) {
        rowsToDelete.push(i + 1); // D√≤ng th·ª±c t·∫ø tr√™n sheet
      } else if (id) {
        seen.add(id);
      }
    }
    // X√≥a t·ª´ d∆∞·ªõi l√™n
    rowsToDelete.reverse().forEach(row => sheet.deleteRow(row));
    ui.alert(`ƒê√£ x√≥a ${rowsToDelete.length} d√≤ng thi·∫øt b·ªã tr√πng m√£.`);
  } catch (e) {
    Logger.log(`L·ªói l√†m s·∫°ch tr√πng l·∫∑p: ${e}`);
    ui.alert("L·ªói l√†m s·∫°ch: " + e.message);
  }
}
