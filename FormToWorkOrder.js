/**
 * Trigger t·ª± ƒë·ªông khi c√≥ form submit (t·ª´ Google Form v√†o Google Sheets)
 * X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ form responses v√† t·∫°o phi·∫øu c√¥ng vi·ªác trong sheet Phi·∫øu C√¥ng Vi·ªác
 */
function onFormSubmit(e) {
  try {
    const responses = e.values;
    // Logger.log("D·ªØ li·ªáu responses: " + JSON.stringify(responses));

    // Map theo ƒë√∫ng th·ª© t·ª± c·ªôt b·∫°n ƒë√£ g·ª≠i
    const formData = {
      timestamp: new Date(responses[0]),                  // D·∫•u th·ªùi gian
      email: responses[1] || "",                          // ƒê·ªãa ch·ªâ email (n·∫øu c√≥)
      targetCode: responses[2] || "",                     // M√£ thi·∫øt b·ªã/h·ªá th·ªëng
      faultDescription: responses[3] || "",               // M√¥ t·∫£ chi ti·∫øt l·ªói/s·ª± c·ªë
      imageUrl: responses[4] || "",                       // ·∫¢nh minh h·ªça (link Google Drive)
      priority: responses[5] || "Trung b√¨nh",             // M·ª©c ƒë·ªô kh·∫©n c·∫•p
      reporter: responses[6] || "",                       // Ng∆∞·ªùi b√°o h·ªèng
      phone: responses[7] || ""                           // S·ªë ƒëi·ªán tho·∫°i li√™n h·ªá
    };

    createWorkOrderFromFormData(formData);
    Logger.log("ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng form submit.");
  } catch (error) {
    Logger.log(`L·ªói khi x·ª≠ l√Ω form: ${error}\nStack: ${error.stack}`);
    MailApp.sendEmail({
      to: EMAIL_ADMIN,
      subject: "L·ªói x·ª≠ l√Ω form b√°o h·ªèng thi·∫øt b·ªã",
      body: "C√≥ l·ªói khi x·ª≠ l√Ω form b√°o h·ªèng: " + error.toString()
    });
  }
}

/**
 * X·ª≠ l√Ω URL ·∫£nh t·ª´ Google Form (cho ph√©p nhi·ªÅu ·∫£nh)
 */
function processImageUrl(fileInfo) {
  if (!fileInfo) return "";
  try {
    if (Array.isArray(fileInfo) && fileInfo.length > 0) {
      return fileInfo.map(file => file.url).filter(Boolean).join(", ");
    }
    if (typeof fileInfo === 'string') return fileInfo;
    return "";
  } catch (e) {
    Logger.log(`L·ªói x·ª≠ l√Ω URL ·∫£nh: ${e}`);
    return "";
  }
}

/**
 * T·∫°o phi·∫øu c√¥ng vi·ªác m·ªõi t·ª´ d·ªØ li·ªáu form b√°o h·ªèng
 * ƒê√£ lo·∫°i b·ªè vi·ªác ƒëi·ªÅn d·ªØ li·ªáu v√†o c·ªôt D (Ng√†y YC/Ph√°t sinh)
 * @param {Object} formData D·ªØ li·ªáu t·ª´ form b√°o h·ªèng
 */
function createWorkOrderFromFormData(formData) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const workOrderSheet = ss.getSheetByName(SHEET_PHIEU_CONG_VIEC);
  if (!workOrderSheet) throw new Error(`Kh√¥ng t√¨m th·∫•y sheet "${SHEET_PHIEU_CONG_VIEC}"`);

  // T·∫°o m√£ phi·∫øu c√¥ng vi·ªác tr·ª±c ti·∫øp
  const newWorkOrderId = generateWorkOrderId();

  // Chu·∫©n b·ªã d·ªØ li·ªáu cho d√≤ng m·ªõi (m·∫£ng ƒë·ªß 23 ph·∫ßn t·ª≠ cho ƒë·∫øn c·ªôt W)
  const newRow = Array(COL_PCV_HINH_ANH).fill("");

  // ƒê·∫∑t m√£ phi·∫øu c√¥ng vi·ªác ƒë√£ t·∫°o v√†o c·ªôt A
  newRow[COL_PCV_MA_PHIEU - 1] = newWorkOrderId; // A: M√£ Phi·∫øu CV

  newRow[COL_PCV_NGAY_TAO - 1] = new Date(); // B: Ng√†y t·∫°o
  newRow[COL_PCV_NGUOI_TAO - 1] = formData.email; // C: Ng∆∞·ªùi t·∫°o (email t·ª´ form)

  // B·ªè ƒëi ph·∫ßn ƒëi·ªÅn d·ªØ li·ªáu v√†o c·ªôt D (Ng√†y YC/Ph√°t sinh) ƒë·ªÉ ng∆∞·ªùi d√πng ƒëi·ªÅn th·ªß c√¥ng
  newRow[COL_PCV_NGAY_YC - 1] = ""; // D: ƒê·ªÉ tr·ªëng

  newRow[COL_PCV_HAN_HT - 1] = ""; // E: H·∫°n ho√†n th√†nh
  newRow[COL_PCV_DOI_TUONG - 1] = formData.targetCode; // F: ƒê·ªëi t∆∞·ª£ng / H·ªá th·ªëng
  newRow[COL_PCV_TEN_DOI_TUONG - 1] = ""; // G: T√™n TB / M√¥ t·∫£ HT
  newRow[COL_PCV_VI_TRI - 1] = ""; // H: V·ªã tr√≠
  newRow[COL_PCV_LOAI_CV - 1] = "S·ª≠a ch·ªØa ƒê·ªôt xu·∫•t"; // I: Lo·∫°i C√¥ng vi·ªác
  newRow[COL_PCV_TAN_SUAT_PM - 1] = ""; // J: T·∫ßn su·∫•t PM

  // K: M√¥ t·∫£ Y√™u c·∫ßu / V·∫•n ƒë·ªÅ - ƒê√É B·ªé TIMESTAMP
  let detailedDesc = formData.faultDescription;
  detailedDesc += "\n\n---\nNg∆∞·ªùi b√°o: " + formData.reporter;
  detailedDesc += "\nEmail: " + formData.email;
  if (formData.phone) detailedDesc += "\nSƒêT: " + formData.phone;
  
  // Th√™m ngu·ªìn nh·∫≠p - form b√°o l·ªói
  detailedDesc += "\n\nForm b√°o l·ªói"; // ƒê√°nh d·∫•u ngu·ªìn t·ª´ form
  
  newRow[COL_PCV_MO_TA_YC - 1] = detailedDesc;

  // L: M·ª©c ƒë·ªô ∆Øu ti√™n
  let priority = "Trung b√¨nh";
  if (formData.priority) {
    if (formData.priority.match(/Cao/i)) priority = "Cao";
    else if (formData.priority.match(/Th·∫•p/i)) priority = "Th·∫•p";
  }
  newRow[COL_PCV_UU_TIEN - 1] = priority;

  newRow[COL_PCV_NGUOI_GIAO - 1] = ""; // M: Ng∆∞·ªùi/Nh√≥m ƒë∆∞·ª£c giao
  newRow[COL_PCV_TRANG_THAI - 1] = "ƒê√£ l√™n k·∫ø ho·∫°ch"; // N: Tr·∫°ng th√°i Phi·∫øu CV
  newRow[COL_PCV_CHI_TIET_NGOAI - 1] = ""; // O: Chi ti·∫øt ƒêV Ngo√†i / Li√™n h·ªá
  newRow[COL_PCV_MO_TA_HT - 1] = ""; // P: M√¥ t·∫£ Ho√†n th√†nh / K·∫øt qu·∫£
  newRow[COL_PCV_VAT_TU - 1] = ""; // Q: V·∫≠t t∆∞ s·ª≠ d·ª•ng
  newRow[COL_PCV_NGAY_HT_THUC_TE - 1] = ""; // R: Ng√†y Ho√†n th√†nh Th·ª±c t·∫ø
  newRow[COL_PCV_TRANG_THAI_TB_SAU - 1] = ""; // S: Tr·∫°ng th√°i TB sau Hƒê
  newRow[COL_PCV_CHI_PHI - 1] = ""; // T: Chi ph√≠ (VND)
  newRow[COL_PCV_LINK_LS - 1] = ""; // U: Link L·ªãch s·ª≠ Ho√†n th√†nh
  newRow[COL_PCV_GHI_CHU - 1] = "T·∫°o t·ª± ƒë·ªông t·ª´ Form B√°o H·ªèng."; // V: Ghi ch√∫ Phi·∫øu CV
  newRow[COL_PCV_HINH_ANH - 1] = formData.imageUrl; // W: H√¨nh ·∫£nh t·ª´ form

  // Th√™m d√≤ng m·ªõi v√†o sheet
  workOrderSheet.appendRow(newRow);
  const newRowIndex = workOrderSheet.getLastRow();

  // C·∫≠p nh·∫≠t th√¥ng tin thi·∫øt b·ªã t·ª´ m√£
  updateEquipmentDetailsSimple(newRowIndex, formData.targetCode, workOrderSheet);
}





/**
 * Phi√™n b·∫£n ƒë∆°n gi·∫£n c·ªßa updateEquipmentDetails kh√¥ng th·ª±c hi·ªán b·∫•t k·ª≥ ƒë·ªãnh d·∫°ng n√†o
 * Ch·ªâ c·∫≠p nh·∫≠t gi√° tr·ªã c·ªôt G v√† H d·ª±a tr√™n m√£ thi·∫øt b·ªã
 */
function updateEquipmentDetailsSimple(rowIndex, targetCode, sheet) {
  try {
    if (!targetCode) return;
    
    // Tr√≠ch xu·∫•t m√£ thi·∫øt b·ªã t·ª´ chu·ªói ƒë·∫ßy ƒë·ªß
    let equipmentCode = targetCode;
    
    if (typeof targetCode === 'string' && targetCode.includes(" - ")) {
      equipmentCode = targetCode.split(" - ")[0].trim();
      Logger.log(`ƒê√£ tr√≠ch xu·∫•t m√£ thi·∫øt b·ªã "${equipmentCode}" t·ª´ chu·ªói ƒë·∫ßy ƒë·ªß "${targetCode}"`);
    } else {
      Logger.log(`S·ª≠ d·ª•ng m√£ thi·∫øt b·ªã tr·ª±c ti·∫øp: "${equipmentCode}"`);
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const equipmentSheet = ss.getSheetByName(EQUIPMENT_SHEET_NAME);
    const systemDefSheet = ss.getSheetByName(SHEET_DINH_NGHIA_HE_THONG);
    
    // T·∫°o map tra c·ª©u thi·∫øt b·ªã
    const equipmentMap = {};
    if (equipmentSheet && equipmentSheet.getLastRow() >= 2) {
      const lastEquipCol = Math.max(COL_EQUIP_ID, COL_EQUIP_NAME, COL_EQUIP_LOCATION);
      const equipData = equipmentSheet.getRange(2, 1, equipmentSheet.getLastRow() - 1, lastEquipCol).getValues();
      equipData.forEach(row => {
        const id = row[COL_EQUIP_ID - 1];
        if (id) {
          const idStr = id.toString().trim();
          if (idStr) {
            equipmentMap[idStr] = {
              name: row[COL_EQUIP_NAME - 1] || 'N/A',
              location: row[COL_EQUIP_LOCATION - 1] || 'N/A'
            };
          }
        }
      });
    }
    
    // T·∫°o map tra c·ª©u h·ªá th·ªëng
    const systemMap = {};
    if (systemDefSheet && systemDefSheet.getLastRow() >= 2) {
      const systemData = systemDefSheet.getRange(2, COL_HT_MA, systemDefSheet.getLastRow() - 1, 2).getValues();
      systemData.forEach(row => {
        const code = row[COL_HT_MA - 1];
        if (code) {
          const codeStr = code.toString().trim();
          if (codeStr) {
            systemMap[codeStr] = row[COL_HT_MO_TA - 1] || "";
          }
        }
      });
    }
    
    Logger.log(`ƒê√£ t·∫£i ${Object.keys(equipmentMap).length} TB, ${Object.keys(systemMap).length} HT.`);
    
    // T√¨m th√¥ng tin theo m√£ ƒë√£ tr√≠ch xu·∫•t
    let targetName = "";
    let targetLocation = "";

    if (equipmentMap[equipmentCode]) {
      targetName = equipmentMap[equipmentCode].name;
      targetLocation = equipmentMap[equipmentCode].location;
      Logger.log(`T√¨m th·∫•y TB. T√™n="${targetName}", V·ªã tr√≠="${targetLocation}"`);
    } else if (systemMap[equipmentCode]) {
      targetName = systemMap[equipmentCode];
      targetLocation = "N/A";
      Logger.log(`T√¨m th·∫•y HT. M√¥ t·∫£="${targetName}"`);
    } else {
      targetName = "M√£ kh√¥ng h·ª£p l·ªá";
      targetLocation = "";
      Logger.log(`Kh√¥ng t√¨m th·∫•y th√¥ng tin cho m√£ "${equipmentCode}"`);
    }

    // C·∫≠p nh·∫≠t c·ªôt G v√† H - CH·ªà D√ôNG setValue, KH√îNG ƒê·ªäNH D·∫†NG
    sheet.getRange(rowIndex, COL_PCV_TEN_DOI_TUONG).setValue(targetName); // C·ªôt G
    sheet.getRange(rowIndex, COL_PCV_VI_TRI).setValue(targetLocation);    // C·ªôt H
    
  } catch (error) {
    Logger.log(`L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin thi·∫øt b·ªã: ${error}\nStack: ${error.stack}`);
  }
}


 
/**
 * G·ª≠i email th√¥ng b√°o cho team k·ªπ thu·∫≠t (t√πy ch·ªçn)
 */
function sendNotificationEmail(formData, rowIndex) {
  const subject = "üì¢ [SHT] Th√¥ng b√°o c√≥ phi·∫øu b√°o h·ªèng thi·∫øt b·ªã m·ªõi";
  let body = "C√≥ phi·∫øu b√°o h·ªèng thi·∫øt b·ªã m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông t·ª´ form.\n\n";
  body += "Thi·∫øt b·ªã/H·ªá th·ªëng: " + formData.targetCode + "\n";
  body += "M√¥ t·∫£ l·ªói: " + formData.faultDescription + "\n";
  body += "M·ª©c ƒë·ªô ∆∞u ti√™n: " + formData.priority + "\n";
  body += "Ng∆∞·ªùi b√°o: " + formData.reporter + " (" + formData.email + ")\n";
  body += "Th·ªùi gian b√°o: " + formData.timestamp.toLocaleString() + "\n\n";
  if (formData.imageUrl) body += "·∫¢nh minh h·ªça: " + formData.imageUrl + "\n\n";
  body += "Link ƒë·∫øn Phi·∫øu C√¥ng Vi·ªác: " + SpreadsheetApp.getActiveSpreadsheet().getUrl() + "\n"; 
  body += "D√≤ng: " + rowIndex + "\n\n";
  body += "Vui l√≤ng x·ª≠ l√Ω theo quy tr√¨nh.\n";
  const recipientEmails = [EMAIL_ADMIN]; // S·ª≠a l·∫°i n·∫øu c·∫ßn g·ª≠i cho nhi·ªÅu ng∆∞·ªùi
  MailApp.sendEmail({
    to: recipientEmails.join(","),
    subject: subject,
    body: body
  });
}
