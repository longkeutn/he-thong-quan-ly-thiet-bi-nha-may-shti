/**
 * H√†m ch√≠nh ƒë·ªÉ t·∫°o prefill link v√† QR code cho c√°c thi·∫øt b·ªã t·ª´ sheet ValidationSource
 * ƒê∆∞·ª£c g·ªçi t·ª´ menu t√πy ch·ªânh
 */
function generateQrCodesForEquipment() {
  const ui = SpreadsheetApp.getUi();
  
  try {
    // Hi·ªán th√¥ng b√°o
    ui.alert(
      'T·∫°o QR Code b√°o h·ªèng thi·∫øt b·ªã',
      'Script s·∫Ω ƒë·ªçc d·ªØ li·ªáu t·ª´ sheet ValidationSource, t·∫°o link prefill v√† QR code cho t·ª´ng thi·∫øt b·ªã.\n\n' +
      'K·∫øt qu·∫£ s·∫Ω ƒë∆∞·ª£c l∆∞u trong sheet m·ªõi "QR_Codes_Equipment".\n\n' +
      'B·∫°n ƒë√£ s·∫µn s√†ng ti·∫øp t·ª•c?',
      ui.ButtonSet.OK_CANCEL
    );
    
    // L·∫•y ID form c·∫ßn prefill
    const formId = getFormId_();
    if (!formId) {
      throw new Error("C·∫ßn nh·∫≠p ID Google Form b√°o h·ªèng thi·∫øt b·ªã");
    }
    
    // L·∫•y ID field trong form (m√£ thi·∫øt b·ªã)
    const fieldId = getFormFieldId_();
    if (!fieldId) {
      throw new Error("C·∫ßn nh·∫≠p ID tr∆∞·ªùng M√£ thi·∫øt b·ªã tr√™n Google Form");
    }
    
    // ƒê·ªçc d·ªØ li·ªáu t·ª´ sheet ValidationSource
    const sourceData = readValidationSourceData_();
    if (!sourceData || sourceData.length === 0) {
      throw new Error("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu trong sheet ValidationSource");
    }
    
    // T·∫°o ho·∫∑c l·∫•y sheet ƒë·ªÉ l∆∞u k·∫øt qu·∫£
    const resultSheet = createOrGetResultSheet_();
    if (!resultSheet) {
      throw new Error("Kh√¥ng th·ªÉ t·∫°o ho·∫∑c t√¨m sheet k·∫øt qu·∫£");
    }
    
    // T·∫°o link prefill v√† QR code cho t·ª´ng thi·∫øt b·ªã
    processDataAndGenerateQrCodes_(sourceData, formId, fieldId, resultSheet);
    
    // Th√¥ng b√°o ho√†n t·∫•t
    ui.alert(
      'Ho√†n th√†nh',
      `ƒê√£ t·∫°o ${sourceData.length} QR code v√† link prefill.\nK·∫øt qu·∫£ ƒë∆∞·ª£c l∆∞u trong sheet "QR_Codes_Equipment".`,
      ui.ButtonSet.OK
    );
    
  } catch (error) {
    Logger.log(`L·ªói: ${error}\nStack: ${error.stack}`);
    ui.alert('L·ªói', `C√≥ l·ªói x·∫£y ra: ${error.message}`, ui.ButtonSet.OK);
  }
}

/**
 * L·∫•y ID Google Form t·ª´ ng∆∞·ªùi d√πng (ch·ªâ c·∫ßn nh·∫≠p 1 l·∫ßn)
 * @return {string} Form ID
 * @private
 */
function getFormId_() {
  const scriptProperties = PropertiesService.getScriptProperties();
  let formId = scriptProperties.getProperty('FORM_ID');
  
  if (!formId) {
    const ui = SpreadsheetApp.getUi();
    const response = ui.prompt(
      'Nh·∫≠p ID Google Form',
      'Nh·∫≠p ID c·ªßa Google Form b√°o h·ªèng thi·∫øt b·ªã.\n\nID n·∫±m trong URL (ph·∫ßn gi·ªØa /d/ v√† /viewform ho·∫∑c /edit):\n' +
      'https://docs.google.com/forms/d/[FORM_ID]/viewform',
      ui.ButtonSet.OK_CANCEL
    );
    
    if (response.getSelectedButton() === ui.Button.OK) {
      formId = response.getResponseText().trim();
      if (formId) {
        scriptProperties.setProperty('FORM_ID', formId);
      } else {
        throw new Error("ID Google Form kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
      }
    } else {
      return null;
    }
  }
  
  return formId;
}

/**
 * L·∫•y ID tr∆∞·ªùng M√£ thi·∫øt b·ªã trong Google Form t·ª´ ng∆∞·ªùi d√πng (ch·ªâ c·∫ßn nh·∫≠p 1 l·∫ßn)
 * @return {string} Field ID (d·∫°ng entry.123456789)
 * @private
 */
function getFormFieldId_() {
  const scriptProperties = PropertiesService.getScriptProperties();
  let fieldId = scriptProperties.getProperty('FIELD_ID');
  
  if (!fieldId) {
    const ui = SpreadsheetApp.getUi();
    const response = ui.prompt(
      'Nh·∫≠p ID Tr∆∞·ªùng Form',
      'Nh·∫≠p ID c·ªßa tr∆∞·ªùng "M√£ thi·∫øt b·ªã" trong Google Form.\n\n' +
      'ID c√≥ d·∫°ng "entry.123456789" v√† c√≥ th·ªÉ l·∫•y t·ª´ URL prefill c·ªßa form.',
      ui.ButtonSet.OK_CANCEL
    );
    
    if (response.getSelectedButton() === ui.Button.OK) {
      fieldId = response.getResponseText().trim();
      if (fieldId && fieldId.startsWith('entry.')) {
        scriptProperties.setProperty('FIELD_ID', fieldId);
      } else {
        throw new Error("ID tr∆∞·ªùng Form kh√¥ng h·ª£p l·ªá. Ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng 'entry.'");
      }
    } else {
      return null;
    }
  }
  
  return fieldId;
}

/**
 * ƒê·ªçc d·ªØ li·ªáu t·ª´ sheet ValidationSource (c·ªôt A)
 * @return {Array} M·∫£ng c√°c m√£ thi·∫øt b·ªã
 * @private
 */
function readValidationSourceData_() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const validationSheet = ss.getSheetByName('ValidationSource');
  
  if (!validationSheet) {
    throw new Error("Kh√¥ng t√¨m th·∫•y sheet ValidationSource");
  }
  
  const lastRow = validationSheet.getLastRow();
  if (lastRow < 2) {
    return []; // Kh√¥ng c√≥ d·ªØ li·ªáu
  }
  
  // ƒê·ªçc c·ªôt A t·ª´ d√≤ng 2 tr·ªü ƒëi (b·ªè qua header)
  const dataRange = validationSheet.getRange(2, 1, lastRow - 1, 1);
  const data = dataRange.getValues();
  
  // L·ªçc ra c√°c d√≤ng kh√¥ng tr·ªëng
  return data.filter(row => row[0] && row[0].toString().trim() !== '')
           .map(row => ({
             original: row[0],                         // Gi√° tr·ªã g·ªëc (c√≥ th·ªÉ l√† "QUATDL-001 - Qu·∫°t tr·∫ßn nh√† ƒÉn")
             code: row[0].toString().split(" - ")[0].trim()  // M√£ thi·∫øt b·ªã (QUATDL-001)
           }));
}

/**
 * T·∫°o ho·∫∑c l·∫•y sheet ƒë·ªÉ l∆∞u k·∫øt qu·∫£
 * @return {Sheet} Sheet k·∫øt qu·∫£
 * @private
 */
function createOrGetResultSheet_() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const resultSheetName = 'QR_Codes_Equipment';
  let resultSheet = ss.getSheetByName(resultSheetName);
  
  if (!resultSheet) {
    resultSheet = ss.insertSheet(resultSheetName);
    
    // T·∫°o header
    resultSheet.getRange('A1:E1').setValues([['M√£ thi·∫øt b·ªã', 'T√™n thi·∫øt b·ªã', 'Link Prefill', 'Link QR Code', 'QR Code']]);
    resultSheet.getRange('A1:E1').setFontWeight('bold');
    resultSheet.setFrozenRows(1);
    
    // ƒê·ªãnh d·∫°ng c·ªôt
    resultSheet.setColumnWidth(1, 150);  // M√£ thi·∫øt b·ªã
    resultSheet.setColumnWidth(2, 250);  // T√™n thi·∫øt b·ªã
    resultSheet.setColumnWidth(3, 300);  // Link Prefill
    resultSheet.setColumnWidth(4, 300);  // Link QR Code 
    resultSheet.setColumnWidth(5, 150);  // QR Code
  } else {
    // X√≥a d·ªØ li·ªáu c≈© (gi·ªØ header)
    const lastRow = resultSheet.getLastRow();
    if (lastRow > 1) {
      resultSheet.getRange(2, 1, lastRow - 1, 5).clearContent();
    }
  }
  
  return resultSheet;
}

/**
 * X·ª≠ l√Ω d·ªØ li·ªáu v√† t·∫°o QR code cho t·ª´ng thi·∫øt b·ªã
 * @param {Array} sourceData D·ªØ li·ªáu ngu·ªìn
 * @param {string} formId ID Google Form
 * @param {string} fieldId ID tr∆∞·ªùng trong form
 * @param {Sheet} resultSheet Sheet k·∫øt qu·∫£
 * @private
 */
function processDataAndGenerateQrCodes_(sourceData, formId, fieldId, resultSheet) {
  const data = [];
  
  sourceData.forEach((item, index) => {
    // T√°ch t√™n thi·∫øt b·ªã n·∫øu c√≥
    let equipmentName = '';
    if (item.original.includes(" - ")) {
      equipmentName = item.original.split(" - ").slice(1).join(" - ").trim();
    }
    
    // T·∫°o link prefill v·ªõi item.original thay v√¨ item.code
    const prefillLink = createPrefillLink_(formId, fieldId, item.original);
    
    // T·∫°o QR code URL
    const qrCodeUrl = createQrCodeUrl_(prefillLink);
    
    // T·∫°o d·ªØ li·ªáu cho d√≤ng m·ªõi
    data.push([
      item.code,
      equipmentName,
      prefillLink,
      qrCodeUrl,
      `=IMAGE("${qrCodeUrl}")`
    ]);
    
    // B√°o c√°o ti·∫øn ƒë·ªô m·ªói 20 d√≤ng
    if ((index + 1) % 20 === 0 || index === sourceData.length - 1) {
      Logger.log(`ƒê√£ x·ª≠ l√Ω ${index + 1}/${sourceData.length} thi·∫øt b·ªã`);
    }
  });
  
  // Ghi d·ªØ li·ªáu v√†o sheet k·∫øt qu·∫£
  if (data.length > 0) {
    resultSheet.getRange(2, 1, data.length, 5).setValues(data);
  }
}

/**
 * T·∫°o link prefill cho Google Form
 * @param {string} formId ID Google Form
 * @param {string} fieldId ID tr∆∞·ªùng trong form
 * @param {string} equipmentCode M√£ thi·∫øt b·ªã
 * @return {string} Link prefill
 * @private
 */
function createPrefillLink_(formId, fieldId, equipmentCode) {
  const encodedValue = encodeURIComponent(equipmentCode);
  return `https://docs.google.com/forms/d/e/${formId}/viewform?usp=pp_url&${fieldId}=${encodedValue}`;
}

/**
 * T·∫°o URL QR code cho link prefill
 * @param {string} prefillLink Link prefill c·∫ßn t·∫°o QR
 * @return {string} URL QR code
 * @private
 */
function createQrCodeUrl_(prefillLink) {
  const encodedLink = encodeURIComponent(prefillLink);
  return `https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=${encodedLink}`;
}

/**
 * T·∫°o menu t√πy ch·ªânh khi m·ªü spreadsheet
 */
function setupQrCodeMenu() {
  const ui = SpreadsheetApp.getUi();
  const menu = ui.createMenu('üîÑ QR Code Tools');
  menu.addItem('T·∫°o QR Code b√°o h·ªèng thi·∫øt b·ªã', 'generateQrCodesForEquipment');
  menu.addItem('ƒê·∫∑t l·∫°i ID Form & ID Field', 'resetFormSettings');
  menu.addToUi();
}

/**
 * ƒê·∫∑t l·∫°i c√†i ƒë·∫∑t ID Form v√† ID Field
 */
function resetFormSettings() {
  const ui = SpreadsheetApp.getUi();
  const scriptProperties = PropertiesService.getScriptProperties();
  
  const response = ui.alert(
    'ƒê·∫∑t l·∫°i th√¥ng tin Form',
    'B·∫°n c√≥ ch·∫Øc mu·ªën ƒë·∫∑t l·∫°i th√¥ng tin ID Form v√† ID Field? B·∫°n s·∫Ω c·∫ßn nh·∫≠p l·∫°i ch√∫ng khi t·∫°o QR code.',
    ui.ButtonSet.YES_NO
  );
  
  if (response === ui.Button.YES) {
    scriptProperties.deleteProperty('FORM_ID');
    scriptProperties.deleteProperty('FIELD_ID');
    ui.alert('ƒê√£ ƒë·∫∑t l·∫°i th√¥ng tin Form th√†nh c√¥ng.');
  }
}
